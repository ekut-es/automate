{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Automate","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started:</p> <p>Update submodules:</p> <pre><code>git submodule update --init --recursive</code></pre> <p>Install poetry</p> <pre><code>python3 -m pip install poetry --user</code></pre> <p>Install automate in development mode:</p> <pre><code>poetry install</code></pre> <p>To enable experimental database support use:</p> <pre><code>poetry install -E postgres</code></pre> <p>Start the development shell</p> <pre><code>poetry shell</code></pre> <p>Copy the configuration file:</p> <pre><code>cp automate.yml ~/.automate.yml</code></pre> <p>And adopt the settings of the configuration file. </p> <p>List available boards</p> <pre><code>automate list</code></pre> <p>View Documentation </p> <pre><code>inv doc</code></pre>"},{"location":"configuration/","title":"Configuration Options","text":"<p>Configuration is saved in ~/.automate.yml .</p> <p>It has the following sections.</p>"},{"location":"configuration/#automate","title":"automate","text":"<p>metadata: Location of metadata .yml files  metadata_url: Url of git repository containing the central metdata repository (ignored if metdata folder exists and is not a git repository) metadata_ref: Git branch or tag of metadata (ignored if metadata folder exists and is not a git repository) identity: (Optional) Path of ssh private key to use toolroot: installation of tools boardroot: Location of saved board data (Kernel SOurces, Kernel Buildds, Device Trees) database: Database Configuration forwards: List of port forwardings</p>"},{"location":"configuration/#database","title":"database","text":"<p>host: host of database server port: port of database server db: name of database to use user: username for database server password: password for database server</p>"},{"location":"configuration/#forwards","title":"forwards","text":"<p>host: remote host for forwards user: username for remote host local_port: local port to forwardings remote_port: remote_port to forward</p>"},{"location":"configuration/#logging","title":"logging","text":"<p>level: loglevel for system one of ERROR, WARNING, INFO, DEBUG</p>"},{"location":"configuration/#example-configuration","title":"Example Configuration","text":"<p>An example configuration file might be:</p> <pre><code>automate:\n  metadata: /local/data/der_schrank/metadata\n  identity: ~/.ssh/id_rsa\n  toolroot: /afs/wsi/es/tools/\n  boardroot: /nfs/es-genial/schrank/boards/\n\n\n  database:\n    host: localhost\n    port: 5433\n    db: der_schrank\n    user: der_schrank\n    password: der_schrank\n\n  forwards:\n    -\n      host: chichi.informatik.uni-tuebingen.de\n      user: gerum\n      local_port: 5433\n      remote_port: 5433\n\nlogging:\n  level: ERROR</code></pre>"},{"location":"development/","title":"Development","text":"<p>To get a common development environment this project uses poetry</p> <p>To get started just run:</p> <pre><code>poetry install\npoetry shell\n</code></pre> <p>To add a dependency use:</p> <pre><code>poetry add $package\n</code></pre> <p>To add a development dependency use:</p> <pre><code>poetry add --dev $package\n</code></pre> <p>To update the package dependencies use:</p> <pre><code>    poetry up\n</code></pre> <p>For automation of common development tasks (testing, deployment, ..) we use pyinvoke . </p> <p>The complete list of currently defined tasks can be shown by running</p> <pre><code>inv --list</code></pre>"},{"location":"development/#test-suite","title":"Test Suite","text":"<p>To run the integration tests use: </p> <pre><code>inv test</code></pre>"},{"location":"development/#static-type-hints","title":"Static Type Hints","text":"<p>Where applicable this project uses type hints to allow,  static type checking and error detection. </p> <p>The typechecking is invoked through:</p> <pre><code>inv mypy</code></pre> <p>Additionally static type information can be derived from the  unittest suite using monkeytype. </p> <pre><code>inv monkeytype</code></pre> <p>This command executes the test suite and derives traces dynamically used types. </p> <p>Then you can use monkeytype to automatically annotate the modules with type  information using:</p> <pre><code>monkeytype list-modules\nmonkeytype stub $module\nmonkeytype apply $module</code></pre>"},{"location":"development/#codestyle","title":"Codestyle","text":"<p>This project uses black to enforce a common codestyle throughout the project.</p> <p>Reformatting can be invoked through:</p> <pre><code>inv black</code></pre> <p>It is recommended to configure your editor to autmatically reload changed files </p>"},{"location":"development/#pre-commit-hooks","title":"Pre-Commit Hooks","text":"<p>Static Typechecking, and blackening can be run as pre-commit hooks. These are installed using:</p> <pre><code>inv pre-commit</code></pre>"},{"location":"metadata-model/","title":"Metadata Model","text":"<p>The necessary metadata for cross compilation and benchmark execution is  stored in a common metadata model. </p> <p>Metadata can either be read from a local directory selected by metadata in automate.yml config file or in a postgres SQL database.</p>"},{"location":"metadata-model/#users","title":"Users","text":"<p>See automate/model/users.py</p> <p>Users are stored as a Dict of \"Str\" -&gt; \"UserModel\". Mapping user names  to UserObjects. The user names can be chosen arbitrarily, but if a the systems uses a common user database, it is recommended, that the usernames map  to system user names. </p> <p>Each users model has the following attributes:</p> Name Type Description name str Full name of user mail str email address of user public_keys List[str] List of ssh public_keys used for authorization of the user"},{"location":"metadata-model/#boards","title":"Boards","text":"<p>Boards are represented by an instance of BoardModel see automate/model/board.py .</p> Name Type Description name str main unique identifier of a single board instance, chose a unique board name for each instance physical board board str unique identifier for a board type should be the same for each instance of the same board type hostname str hostname of the board as defined in /etc/hostname and /etc/hosts mac_address str MAC address of the main ethernet connection of the board. For  multiple ethernet adapters chose the one connected to the gatway description str Short human readable description of the board and its configuration rundir Path directory on the board used for running the binaries and storing temporary results doc List List of documentation links gateway GatewayModel Describes connection to the boards gateway server connections List List of ssh or uart connections usable with this board, all connections are forwarded over the boards gateway cores List List of core models describing each cpu core on the board that is usable by the OS of the board os OSModel Describes the OS Kernel and Rootfs configuration see:  OS soc SOCModel Describes the SOC used on a board see:  SoC power_supply PowerSupplyModel Describes the power supply requirements for the board see: Power Supply"},{"location":"metadata-model/#documentation-links","title":"Documentation Links","text":"<p>Provides a link to external or internal Documentation of a board,  defined in DocumentationLinkModel .</p> <p>It has the following attributes:</p> Name Type Description title str Short description or title of the linked documentation location HttpURL or Path HttpURL to external Documentation or Path to shared file storage for shared documentation"},{"location":"metadata-model/#cores","title":"Cores","text":"<p>Describes a CPU-Core of the SoC. </p> Name Type Description num/os_id int number of the cpu in the enumeration scheme of the boards os e.g. number used for taskset -C and core isolation isa str short identifier of the cores instruction set architecture uarch str short identifier of the cores microarchitecture vendor/implementer str name of the cpu vendor extensions List[str] List of cpu isa extensions as reported by /proc/cpuinfo description str Short human readable description of the core and its main features <p>Currently we only describe main cores of the SoC that are under control of the OS-Scheduler, might be used to also  describe accelerator/gpu cores in the future.</p>"},{"location":"metadata-model/#os","title":"OS","text":"<p>Describes the Configuration of the Operating System Kernel and RootFS. Is defined by OSModel in automate/models/board.py.</p> Name Type Description triple TripleModel Default compiler target triple for this OS/Rootfs distribution str Name of the distribution this rootfs is based on, should correspond to ID from /etc/os-release release str Identifier for the os release, should correspond to VERSION or VERSION_CODENAME from /etc/os-release description str Short human readable description of the OS sysroot Path Path to a mirror of the relevant parts of the rootfs for cross compilation and linkage with distribution provided libraries rootfs Path Path to a snapshot of the rootfs of the system multiarch bool this rootfs uses a multiarch layout should probably be true only for debian based rootfes kernels List List of Kernels supported by this OS Image"},{"location":"metadata-model/#kernel","title":"Kernel","text":"<p>The runtime and build configuration of kernels is described using KernelModel from automate/models/board.py .</p> Name Type Description name str Unique identifier for this kernel config description str Short human readable description of this kernel config commandline str Default commandline of this kernel should correspond to output of uname -r config/kernel_config Path Path to copy of the kernel build configuration file in shared data folder source/kernel_source Path Path to the kernel source tarball in shared data folder srcdir/kernel_srcdir Path Relative Path to kernel source directory in extracted kernel source tarball image KernelImageModel uboot UBootModel default bool This kernel is started at board power up."},{"location":"metadata-model/#notes","title":"Notes","text":"<p>default: If we have not configured the default kernel for a board this might be false for all kernels. In this case the kernels are only usable using automate board.kexec .</p>"},{"location":"metadata-model/#soc","title":"SoC","text":"<p>Currently Optional: TBD</p>"},{"location":"metadata-model/#power-supply","title":"Power Supply","text":"<p>Currently Optional: TBD</p>"},{"location":"metadata-model/#compiler-model","title":"Compiler Model","text":"<p>Metadata format for compilers has not been frozen yet: TBD</p>"},{"location":"api-documentation/boards/","title":"Boards","text":""},{"location":"api-documentation/boards/#automateboard","title":"automate.board","text":""},{"location":"api-documentation/boards/#_connectioncontextmanager-objects","title":"_ConnectionContextManager Objects","text":"<pre><code>class _ConnectionContextManager(AbstractContextManager)\n</code></pre> <p>Context manager for board connections to allow reuse of board connections</p> <p></p>"},{"location":"api-documentation/boards/#__getattr__","title":"__getattr__","text":"<pre><code>def __getattr__(attr: str) -&gt; Any\n</code></pre> <p>proxy model properties if they are not shadowed by an own property</p> <p></p>"},{"location":"api-documentation/boards/#board-objects","title":"Board Objects","text":"<pre><code>class Board(object)\n</code></pre> <p>Automation Class for script based interaction with boards:</p> <p>Provides access to:    - board data    - board automation: upload, execution, reboot, reset, ...    - board specific cross compilers</p> <p></p>"},{"location":"api-documentation/boards/#compiler","title":"compiler","text":"<pre><code>def compiler(\n        compiler_name: str = \"\",\n        toolchain: Union[Toolchain, str] = Toolchain.GCC) -&gt; CrossCompiler\n</code></pre> <p>Build a Cross Compiler Object for this board</p> <p>By default uses newest gcc compiler available in metadata.</p> <p>Arguments</p> <ul> <li>compiler_name: use a specifc compiler id</li> <li>toolchain:  use newest configured compiler</li> </ul> <p>Returns</p> <p>Object of class <code>automate.compiler.CrossCompiler</code> configured to run builds for this board</p> <p></p>"},{"location":"api-documentation/boards/#compilers","title":"compilers","text":"<pre><code>def compilers(\n        toolchain: Union[Toolchain, None, str] = None) -&gt; List[CrossCompiler]\n</code></pre> <p>Build list of cross compiler objects configured for this board</p> <p>Arguments</p> <ul> <li>toolchain: Only build cross compilers from the given toolchain</li> </ul> <p>Returns</p> <p>List of configured cross compilers</p> <p></p>"},{"location":"api-documentation/boards/#connect","title":"connect","text":"<pre><code>def connect(type: str = \"ssh\", timeout: int = 30) -&gt; Connection\n</code></pre> <p>Return a fabric.Connection to the board.</p> <p>Arguments</p> <ul> <li>type: connection type currently only \"ssh\" is supportted</li> <li>timeout: timeout unitl connection should be established</li> </ul> <p>Returns</p> <p>/fabric.Connection/ to the board</p> <p></p>"},{"location":"api-documentation/boards/#reboot","title":"reboot","text":"<pre><code>def reboot(wait=True) -&gt; Union[Connection, None]\n</code></pre> <p>Starts a new connection to the device and initiates a reboot</p> <p>Arguments</p> <ul> <li>wait: If wait is true tries to start a new connection,        waits until connecting succeeds, and returns a new connection. Returns</li> </ul> <p>If wait was given a new connection is Returned</p> <p></p>"},{"location":"api-documentation/boards/#wait_for_connection","title":"wait_for_connection","text":"<pre><code>def wait_for_connection() -&gt; Connection\n</code></pre> <p>Wait until a successful ssh connection to the board can be established</p> <p>Returns</p> <p>A new fabric.Connection object</p> <p></p>"},{"location":"api-documentation/boards/#reset","title":"reset","text":"<pre><code>def reset(wait=True) -&gt; Union[Connection, None]\n</code></pre> <p>Hard-Reset the board</p> <p>TODO: Currently not implemented</p> <p>Arguments</p> <ul> <li>wait: if true wait until the board is connectible again</li> </ul> <p>Returns</p> <p>If wait was true a new Connection object</p> <p></p>"},{"location":"api-documentation/boards/#homedir","title":"homedir","text":"<pre><code>def homedir() -&gt; Path\n</code></pre> <p>Return the home directory of the connected user</p> <p>Returns</p> <p><code>pathlib.Path</code>: home directory</p> <p></p>"},{"location":"api-documentation/boards/#kexec","title":"kexec","text":"<pre><code>def kexec(kernel_name=\"\",\n          append=\"\",\n          commandline=\"\",\n          wait=True) -&gt; Union[Connection, None]\n</code></pre> <p>Start a board kernel using kexec</p> <p>Arguments</p> <ul> <li>kernel_name: unique name of the kernel to boot</li> <li>append: string of addition kernel commandline flags</li> <li>commandline: completely new kernel commandline</li> <li>wait: block unitl board is reachable via ssh again and reconnect</li> </ul> <p>Returns</p> <p>if wait was given a new fabric.Connection is returned</p> <p></p>"},{"location":"api-documentation/boards/#kernel_data","title":"kernel_data","text":"<pre><code>def kernel_data(name: str) -&gt; Union[KernelData, None]\n</code></pre> <p>Information about the installed kernels</p> <p>Arguments</p> <ul> <li>name: kernel name for which information should be returned</li> </ul> <p>Returns</p> <p>KernelData object for the kernel configration</p> <p></p>"},{"location":"api-documentation/boards/#builder","title":"builder","text":"<pre><code>def builder(typ, builddir: Union[Path, str] = \"\") -&gt; BaseBuilder\n</code></pre> <p>Return a builder object for this board</p> <p>Arguments</p> <ul> <li>typ: Type of the buildsystem to use choices are cmake, kernel, make</li> </ul> <p>Returns</p> <p>configured builder object</p> <p></p>"},{"location":"api-documentation/boards/#__getattr___1","title":"__getattr__","text":"<pre><code>def __getattr__(attr: str) -&gt; Any\n</code></pre> <p>proxy model properties if they are not shadowed by an own property</p>"},{"location":"api-documentation/cross-compilers/","title":"Cross Compilers","text":""},{"location":"api-documentation/cross-compilers/#automatecompiler","title":"automate.compiler","text":""},{"location":"api-documentation/cross-compilers/#compiler-objects","title":"Compiler Objects","text":"<pre><code>class Compiler(object)\n</code></pre> <p>Represents an unconfigured generic compiler</p> <p></p>"},{"location":"api-documentation/cross-compilers/#triples","title":"triples","text":"<pre><code>@property\ndef triples() -&gt; List[TripleModel]\n</code></pre> <p>List of supported triples</p> <p></p>"},{"location":"api-documentation/cross-compilers/#version","title":"version","text":"<pre><code>@property\ndef version() -&gt; VersionString\n</code></pre> <p>Compiler version</p> <p></p>"},{"location":"api-documentation/cross-compilers/#multiarch","title":"multiarch","text":"<pre><code>@property\ndef multiarch() -&gt; bool\n</code></pre> <p>Wether this compiler supports multiarch rootfs</p> <p></p>"},{"location":"api-documentation/cross-compilers/#bin_path","title":"bin_path","text":"<pre><code>@property\ndef bin_path() -&gt; Path\n</code></pre> <p>Installation path of compiler tools</p> <p></p>"},{"location":"api-documentation/cross-compilers/#prefix","title":"prefix","text":"<pre><code>@property\ndef prefix()\n</code></pre> <p>Prefix of compiler tools eg: arm-linux-gnueabihf</p> <p></p>"},{"location":"api-documentation/cross-compilers/#cc","title":"cc","text":"<pre><code>@property\ndef cc() -&gt; str\n</code></pre> <p>Binary name of C compiler</p> <p></p>"},{"location":"api-documentation/cross-compilers/#cxx","title":"cxx","text":"<pre><code>@property\ndef cxx() -&gt; str\n</code></pre> <p>Binary name of C++ compiler</p> <p></p>"},{"location":"api-documentation/cross-compilers/#asm","title":"asm","text":"<pre><code>@property\ndef asm() -&gt; str\n</code></pre> <p>Binary name of assembler</p> <p></p>"},{"location":"api-documentation/cross-compilers/#ld","title":"ld","text":"<pre><code>@property\ndef ld() -&gt; str\n</code></pre> <p>Binary name of Linker</p> <p></p>"},{"location":"api-documentation/cross-compilers/#ar","title":"ar","text":"<pre><code>@property\ndef ar() -&gt; str\n</code></pre> <p>Binary name of Archiver</p> <p></p>"},{"location":"api-documentation/cross-compilers/#toolchain","title":"toolchain","text":"<pre><code>@property\ndef toolchain() -&gt; Toolchain\n</code></pre> <p>Toolchain family of the compiler eg. LLVM or GCC</p> <p></p>"},{"location":"api-documentation/cross-compilers/#id","title":"id","text":"<pre><code>@property\ndef id() -&gt; str\n</code></pre> <p>Unique identifier of compiler in metadata</p> <p></p>"},{"location":"api-documentation/cross-compilers/#name","title":"name","text":"<pre><code>@property\ndef name() -&gt; str\n</code></pre> <p>Unique identifier of compiler in metadata</p> <p></p>"},{"location":"api-documentation/cross-compilers/#crosscompiler-objects","title":"CrossCompiler Objects","text":"<pre><code>class CrossCompiler(Compiler)\n</code></pre> <p>Represents a Compiler with board specific configuration</p> <p></p>"},{"location":"api-documentation/cross-compilers/#configure_extend","title":"configure_extend","text":"<pre><code>def configure_extend(flags: Optional[str] = None,\n                     cflags: Optional[str] = None,\n                     cxxflags: Optional[str] = None,\n                     ldflags: Optional[str] = None,\n                     libs: Optional[str] = None) -&gt; None\n</code></pre> <p>Extend compiler flags</p> <p>For arguments see configure</p> <p></p>"},{"location":"api-documentation/cross-compilers/#configure","title":"configure","text":"<pre><code>def configure(flags: Optional[str] = None,\n              cflags: Optional[str] = None,\n              cxxflags: Optional[str] = None,\n              ldflags: Optional[str] = None,\n              libs: Optional[str] = None,\n              uarch_opt=True,\n              isa_opt=True,\n              enable_sysroot=True) -&gt; None\n</code></pre> <p>Set compiler options</p> <p>Arguments</p> <ul> <li>flags: Basic flags (used for compilation and linkags)</li> <li>cflags: flags for C compiler</li> <li>cxxflags: flags for C++ compiler</li> <li>ldflags: flags for linker (linker is assumed to call C/C++-Compiler)</li> <li>libs: Additional libraries to link (some builds might need -lrt)</li> <li>uarch_opt: Enable microarchitecture specific optimizations</li> <li>isa_opt: Enable isa specific optimizations</li> <li>enable_sysroot: Link and build with --sysroot set to a dump of the boards root file system, linkers and cmake will link to libraries installed on the board</li> </ul> <p></p>"},{"location":"api-documentation/cross-compilers/#gcc_toolchain","title":"gcc_toolchain","text":"<pre><code>@property\ndef gcc_toolchain() -&gt; Union[None, \"CrossCompiler\"]\n</code></pre> <p>GCC toolchain to use for LLVM based cross compilers</p> <p>The gcc toolchain is used to provide the linker, and the runtime libraries libgcc and libstdc++</p> <p></p>"},{"location":"api-documentation/cross-compilers/#os","title":"os","text":"<pre><code>@property\ndef os() -&gt; OS\n</code></pre> <p>OS part of compiler target triple</p> <p></p>"},{"location":"api-documentation/cross-compilers/#machine","title":"machine","text":"<pre><code>@property\ndef machine() -&gt; Machine\n</code></pre> <p>Machine part of compiler target triple</p> <p></p>"},{"location":"api-documentation/cross-compilers/#environment","title":"environment","text":"<pre><code>@property\ndef environment() -&gt; Environment\n</code></pre> <p>Environment part of compiler target triple</p> <p></p>"},{"location":"api-documentation/cross-compilers/#isa_flags","title":"isa_flags","text":"<pre><code>@property\ndef isa_flags() -&gt; str\n</code></pre> <p>Default isa specific flags for this board if enabled</p> <p></p>"},{"location":"api-documentation/cross-compilers/#uarch_flags","title":"uarch_flags","text":"<pre><code>@property\ndef uarch_flags() -&gt; str\n</code></pre> <p>Default microarchitecture specific flags for this board if enabled</p> <p></p>"},{"location":"api-documentation/cross-compilers/#uarch_or_isa_flags","title":"uarch_or_isa_flags","text":"<pre><code>@property\ndef uarch_or_isa_flags() -&gt; str\n</code></pre> <p>Default flags machine specific flags for this board if enabled</p> <p></p>"},{"location":"api-documentation/cross-compilers/#sysroot","title":"sysroot","text":"<pre><code>@property\ndef sysroot() -&gt; Union[Path, str]\n</code></pre> <p>Sysroot flag for this compiler and board</p> <p></p>"},{"location":"api-documentation/cross-compilers/#valid","title":"valid","text":"<pre><code>@property\ndef valid() -&gt; bool\n</code></pre> <p>Boolean flag wether this compiler is expected to generate working executables</p> <p></p>"},{"location":"api-documentation/cross-compilers/#base_flags","title":"base_flags","text":"<pre><code>@property\ndef base_flags() -&gt; str\n</code></pre> <p>basic flags shared between  C/C++ compiler and Linker</p> <p></p>"},{"location":"api-documentation/cross-compilers/#cflags","title":"cflags","text":"<pre><code>@property\ndef cflags() -&gt; str\n</code></pre> <p>CFLAGS for this compiler</p> <p></p>"},{"location":"api-documentation/cross-compilers/#cxxflags","title":"cxxflags","text":"<pre><code>@property\ndef cxxflags() -&gt; str\n</code></pre> <p>CXXFLAGS for this compiler</p> <p></p>"},{"location":"api-documentation/cross-compilers/#ldflags","title":"ldflags","text":"<pre><code>@property\ndef ldflags()\n</code></pre> <p>LDFLAGS for this compiler</p> <p>These flags are appended to the linker commandline before object files</p> <p></p>"},{"location":"api-documentation/cross-compilers/#libs","title":"libs","text":"<pre><code>@property\ndef libs() -&gt; str\n</code></pre> <p>LIBFLAGS for this compiler</p> <p>These flags are appended to the linker driver commandline after the objectfiles Currently not used</p> <p></p>"},{"location":"api-documentation/cross-compilers/#default_builddir","title":"default_builddir","text":"<pre><code>@property\ndef default_builddir() -&gt; Path\n</code></pre> <p>The default build directory for this cross compiler / board combinarion For now this is just \"/builds/\""},{"location":"api-documentation/database-integration/","title":"Database Integration","text":""},{"location":"api-documentation/database-integration/#automatedatabasedatabase","title":"automate.database.database","text":""},{"location":"api-documentation/database-integration/#database_enabled","title":"database_enabled","text":"<pre><code>def database_enabled() -&gt; bool\n</code></pre> <p>Returns True if required packages for database connection are found</p> <p></p>"},{"location":"api-documentation/database-integration/#database-objects","title":"Database Objects","text":"<pre><code>class Database()\n</code></pre> <p>A Database connection</p> <p></p>"},{"location":"api-documentation/database-integration/#__init__","title":"__init__","text":"<pre><code>def __init__(host: str, port: int, db: str, user: str, password: str) -&gt; None\n</code></pre> <p>Init database connection</p> <p>Arguments</p> <ul> <li>host: hostname or ip address for database connection</li> <li>port: port for database connection</li> <li>db: name of database</li> <li>user: username for connection</li> <li>password: password for connection</li> </ul> <p></p>"},{"location":"api-documentation/database-integration/#init","title":"init","text":"<pre><code>def init() -&gt; None\n</code></pre> <p>Initialize an database with locks</p> <p></p>"},{"location":"api-documentation/database-integration/#insert_board","title":"insert_board","text":"<pre><code>def insert_board(board_model: BoardModel, additional_data: Any) -&gt; None\n</code></pre> <p>Insert a board into database</p> <p>Arguments</p> <ul> <li>board_model: The BoardModel to insert</li> <li> <p>additional_data: to be removed</p> </li> <li> <p>TODO: what happens if a board model with the same name already exists.</p> </li> </ul>"},{"location":"api-documentation/model/","title":"Model","text":""},{"location":"api-documentation/model/#automatemodelcommon","title":"automate.model.common","text":""},{"location":"api-documentation/model/#versionstring-objects","title":"VersionString Objects","text":"<pre><code>class VersionString(str)\n</code></pre> <p>Implements a string that supports correct ordering for common version numbering schemes.</p> <p>For example:     VersionString(\"10.0.0\") &gt; VersionString(\"9.0.0\")</p> <p>This is a very simple comparison by splitting each version  at . characters and then filling each component by prepending zeros until a length of 8 is reached, before comparison.</p> <p>So in the example above the actual comparison would be:</p> <p>\"00000010.00000000.00000000\" &gt; \"00000009.00000000.00000000\"</p> <p></p>"},{"location":"api-documentation/model/#automatemodelboard","title":"automate.model.board","text":""},{"location":"api-documentation/model/#boardmodelfs-objects","title":"BoardModelFS Objects","text":"<pre><code>class BoardModelFS(BoardModel, LoadedModelBase)\n</code></pre> <p>Adds fields like file_name and file_modification time that are only meaningful for models loaded from Filesystem</p> <p></p>"},{"location":"api-documentation/model/#boardmodeldb-objects","title":"BoardModelDB Objects","text":"<pre><code>class BoardModelDB(BoardModel, DBModelBase)\n</code></pre> <p>Add data model field id:int for database id</p> <p></p>"},{"location":"api-documentation/model/#automatemodelcompiler","title":"automate.model.compiler","text":""},{"location":"api-documentation/model/#triplemodel-objects","title":"TripleModel Objects","text":"<pre><code>class TripleModel(DataModelBase)\n</code></pre> <p>Description of a target triple</p>"},{"location":"api-documentation/utilities/","title":"Utilities","text":""},{"location":"api-documentation/utilities/#automateutilskernel","title":"automate.utils.kernel","text":""},{"location":"api-documentation/utilities/#kernelconfigbuilder-objects","title":"KernelConfigBuilder Objects","text":"<pre><code>class KernelConfigBuilder()\n</code></pre>"},{"location":"api-documentation/utilities/#predefined_configs","title":"predefined_configs","text":"<pre><code>def predefined_configs() -&gt; Generator[Tuple[str, List[str]], None, None]\n</code></pre> <p>Return all predefined configs that are applicable to a board</p> <p>Returns:</p> <p>An iterable of tuple of string(name) and list of string [kernel config options]</p> <p></p>"},{"location":"api-documentation/utilities/#predefined_config","title":"predefined_config","text":"<pre><code>def predefined_config(name: str) -&gt; List[str]\n</code></pre> <p>Search for predefined config options with given name</p> <p></p>"},{"location":"api-documentation/utilities/#kerneldata-objects","title":"KernelData Objects","text":"<pre><code>class KernelData(object)\n</code></pre> <p>Provides collection of calculated kernel data</p> <p></p>"},{"location":"api-documentation/utilities/#shared_data_dir","title":"shared_data_dir","text":"<pre><code>@property\ndef shared_data_dir()\n</code></pre> <p>Location for shared kernel sources and cached deploy and build packages</p> <p></p>"},{"location":"api-documentation/utilities/#deploy_package_name","title":"deploy_package_name","text":"<pre><code>@property\ndef deploy_package_name()\n</code></pre> <p>Name of the kernel deploy archive</p> <p></p>"},{"location":"api-documentation/utilities/#build_cache_name","title":"build_cache_name","text":"<pre><code>@property\ndef build_cache_name()\n</code></pre> <p>Name of the kernel build cache archive</p> <p></p>"},{"location":"api-documentation/utilities/#automateutils","title":"automate.utils","text":""},{"location":"api-documentation/utilities/#fix_symlinks","title":"fix_symlinks","text":"<pre><code>def fix_symlinks(base_path: Path) -&gt; None\n</code></pre> <p>This function tries to fix symlinks in cloned buildroots by:</p> <ol> <li>Searching for all symlinks with absolute target path in base_path</li> <li>Prepending base_path to the target path</li> <li>Making the targets of the links relative to the symlink location</li> <li>Deleting the symlink and replacing it with one to the relative location</li> </ol> <p></p>"},{"location":"api-documentation/utilities/#automateutilsuboot","title":"automate.utils.uboot","text":""},{"location":"api-documentation/utilities/#build_ubimage","title":"build_ubimage","text":"<pre><code>def build_ubimage(c, uboot_desc: UBootModel, arch: str, build_path: Path,\n                  boot_path: Path, kernel_image: Path) -&gt; None\n</code></pre> <p>Build a U-Boot image file  for kernel deployment</p> <p>Arguments</p> <ul> <li>c: AutomateContext to run commands on</li> <li>uboot_desc: UBootModel describing image configuration</li> <li>build_path: Path of kernel Build directory</li> <li>boot_path: path of built ubimage (usually install/boot inside kernel build directory)</li> <li>kernel_image: path to kernel_image file that should be packaged inside builddir</li> </ul> <p></p>"},{"location":"api-documentation/utilities/#automateutilsappdirs","title":"automate.utils.appdirs","text":""},{"location":"api-documentation/utilities/#automateutilsnetwork","title":"automate.utils.network","text":""},{"location":"api-documentation/utilities/#connect","title":"connect","text":"<pre><code>def connect(host: str,\n            user: str,\n            port: int = 22,\n            identity: Optional[Path] = None,\n            passwd_allowed: bool = False,\n            passwd_retries: int = 3,\n            keyring_allowed: bool = True,\n            gateway: Optional[fabric.Connection] = None,\n            timeout: int = 30) -&gt; fabric.Connection\n</code></pre> <p>Get a fabric connection to a remote host</p> <p>Arguments</p> <ul> <li>host: hostname or ip address</li> <li>username: on remote host</li> <li>port: ssh port for connection</li> <li>identity: Path to ssh private key</li> <li>passwd_allowed: if True use password if ssh public key authentication fails</li> <li>passwd_retries: number of retries for password authentication</li> <li>keyring_allowed: if True store passwords in system keyring</li> <li>gateway: fabric.Connection to use as gateway</li> <li>timeout: timeout for connections in seconds</li> </ul> <p>Returns</p> <p>a fabric.Connection to the host</p> <p></p>"},{"location":"api-documentation/utilities/#find_local_port","title":"find_local_port","text":"<pre><code>def find_local_port(start=1024, end=65536) -&gt; int\n</code></pre> <p>Returns a locally bindable port number</p> <p>Returns</p> <p>port number [int]</p> <p></p>"},{"location":"api-documentation/utilities/#find_remote_port","title":"find_remote_port","text":"<pre><code>def find_remote_port(con) -&gt; int\n</code></pre> <p>Returns a port number bindable on the remote end</p> <p>Returns</p> <p>port number [int]</p> <p></p>"},{"location":"api-documentation/utilities/#rsync","title":"rsync","text":"<pre><code>def rsync(con: fabric.Connection,\n          source: str,\n          target: str,\n          exclude: Iterable[str] = (),\n          delete: bool = False,\n          verbose: bool = False,\n          rsync_timeout: int = 20,\n          retries: int = 5,\n          rsync_opts: str = \"\") -&gt; None\n</code></pre> <p>RSync files or folders to board</p> <ol> <li>Starts a remote rsync forwards</li> <li>Forwards rsync server ports over gateway</li> <li>runs rsync -pthrz  <li>stops remote rsync daemon</li> <p>rsync server is run as the connections default user, so can not modify files and folders for which this user does not have access rights </p> <p>Arguments</p> <ul> <li>con: fabric.Connection to board</li> <li>source: local path should end in \"/\" if the complete folder is synced</li> <li>target: remote_path</li> <li>exclude: iterable of exclude patterns</li> <li>rsync_timeout: --timeout argument for rsync</li> <li>retries: number of retries if rsync fails</li> <li>verbose: if True print transfered files to stdout</li> <li>rsync_opts: string of additional rsync options</li> </ul> <p></p>"},{"location":"api-documentation/utilities/#automateutilscpuinfo","title":"automate.utils.cpuinfo","text":""},{"location":"api-documentation/utilities/#cpuinfo","title":"cpuinfo","text":"<pre><code>def cpuinfo(con: Connection) -&gt; List[CoreModel]\n</code></pre> <p>Parse remote CPU info over ssh connection</p> <p>Arguments</p> <ul> <li>con: fabric.Connection for the</li> </ul> <p>Returns</p> <p>A list of CoreModel with the parsed cpuinfos</p> <p></p>"},{"location":"api-documentation/utilities/#automateutilscpuinfo_arm","title":"automate.utils.cpuinfo_arm","text":""},{"location":"api-documentation/builders/cmake/","title":"cMake","text":""},{"location":"api-documentation/builders/cmake/#automatebuildercmake","title":"automate.builder.cmake","text":""},{"location":"api-documentation/builders/cmake/#cmakebuilder-objects","title":"CMakeBuilder Objects","text":"<pre><code>class CMakeBuilder(BaseBuilder)\n</code></pre>"},{"location":"api-documentation/builders/cmake/#configure","title":"configure","text":"<pre><code>def configure(\n        cross_compiler: \"Optional[automate.compiler.CrossCompiler]\" = None,\n        srcdir: Union[Path, str] = \"\",\n        prefix: Union[Path, str] = \"\",\n        extra_flags: Optional[Dict[str, str]] = None,\n        override_flags: Optional[Dict[str, str]] = None,\n        cmake_definitions: List[str] = [])\n</code></pre> <p>Configure cmake based build</p> <p>Arguments </p> <ul> <li>cross_compiler: cross compiler for the build, default: use default compiler for the board</li> <li>srcdir: directory conaining CMakeLists.txt</li> <li>prefix: install prefix on the board</li> <li>cmake_definitions: extra cmake definitions</li> </ul> <p></p>"},{"location":"api-documentation/builders/cmake/#build","title":"build","text":"<pre><code>def build(c)\n</code></pre> <p>Run cmake build</p> <p></p>"},{"location":"api-documentation/builders/cmake/#install","title":"install","text":"<pre><code>def install(c)\n</code></pre> <p>Run cmake install</p> <p></p>"},{"location":"api-documentation/builders/cmake/#deploy","title":"deploy","text":"<pre><code>def deploy(c, delete=False)\n</code></pre> <p>Deploy target on board</p> <p>Arguments</p> <ul> <li>delete: if true clean install prefix before deployment</li> </ul>"},{"location":"api-documentation/builders/kernel/","title":"kernel","text":""},{"location":"api-documentation/builders/kernel/#automatebuilderkernel","title":"automate.builder.kernel","text":""},{"location":"api-documentation/builders/kernel/#kernelbuilder-objects","title":"KernelBuilder Objects","text":"<pre><code>class KernelBuilder(BaseBuilder)\n</code></pre>"},{"location":"api-documentation/builders/kernel/#configure","title":"configure","text":"<pre><code>def configure(kernel_name, cross_compiler=None)\n</code></pre> <p>configure kernel build</p> <p>Arguments</p> <ul> <li>kernel_name: name of the kernel config (see Metadata)</li> <li>cross_compiler: cross_compiler object to use</li> </ul> <p></p>"},{"location":"api-documentation/builders/kernel/#build","title":"build","text":"<pre><code>def build()\n</code></pre> <p>Build kernel</p> <p></p>"},{"location":"api-documentation/builders/kernel/#install","title":"install","text":"<pre><code>def install()\n</code></pre> <p>Install kernel locally and save build directory snapshot</p>"},{"location":"api-documentation/builders/make/","title":"make","text":""},{"location":"api-documentation/builders/make/#automatebuildermake","title":"automate.builder.make","text":""},{"location":"api-documentation/builders/make/#makefilebuilder-objects","title":"MakefileBuilder Objects","text":"<pre><code>class MakefileBuilder(BaseBuilder)\n</code></pre>"},{"location":"api-documentation/builders/make/#configure","title":"configure","text":"<pre><code>def configure(\n        cross_compiler: \"Optional[automate.compiler.CrossCompiler]\" = None,\n        srcdir: Union[Path, str] = \"\",\n        prefix: Union[Path, str] = \"\",\n        extra_flags: Optional[Dict[str, str]] = None,\n        override_flags: Optional[Dict[str, str]] = None)\n</code></pre> <p>Configure a makefile build</p> <ol> <li>Copy source directory to build directory</li> <li>Record build variables in build_directory/buildvars.yml</li> </ol> <p></p>"},{"location":"api-documentation/builders/make/#build","title":"build","text":"<pre><code>def build(target=\"\")\n</code></pre> <p>Run make with default target and set BUILDVARS for board</p> <p></p>"},{"location":"api-documentation/builders/make/#install","title":"install","text":"<pre><code>def install()\n</code></pre> <p>Do nothing</p> <p></p>"},{"location":"api-documentation/builders/make/#deploy","title":"deploy","text":"<pre><code>def deploy(connection=None, delete=False)\n</code></pre> <p>Deploy package on board</p> <p>Just copies build_directory/srcdir_name to the rundir</p> <p>Arguments</p> <ul> <li>delete: if true delete remove non existant files from install prefix on the board</li> </ul> <p></p>"},{"location":"api-documentation/builders/make/#deploy_internal","title":"deploy_internal","text":"<pre><code>def deploy_internal(con, delete=False)\n</code></pre> <p>Deploy package on board (see deploy())</p> <p>Arguments</p> <ul> <li> <p>con: Connection object</p> </li> <li> <p>delete: see deploy()</p> </li> </ul>"},{"location":"commandline-interface/automate-run/","title":"Interface for Python Interaction","text":"<p>The command automate_run can be used to script board and  compiler interaction in python. </p> <pre><code>Usage: automate-run [--core-opts] &lt;subcommand&gt; [--subcommand-opts] ...\n\nCore options:\n\n  -d, --debug                        Enable debug output.\n  -l [STRING], --list[=STRING]       List available tasks, optionally limited to a namespace.\n  -V, --version                      Show version and exit.</code></pre> <p>The tasks provided by automate-run are defined in a file called autofile.py .  Which should be placed in the current working directory. </p> <p>Tasks are then defined using the pyinvoke tasks syntax (http://docs.pyinvoke.org/en/stable/concepts/invoking-tasks.html). The only differences  is, that tasks get handed in a AutomateContext object instead of pyinvokes contexts, this allows tasks to interact with the boards and compilers from  the Metadata repository. </p>"},{"location":"commandline-interface/automate-run/#examples","title":"Examples","text":""},{"location":"commandline-interface/automate-run/#run-hello-on-all-boards","title":"Run hello on All boards:","text":"<p>Put the following in autofile.py</p> <pre><code>from invoke import task\n\n@task\ndef say_hello(c):\n    for board in c.boards():\n        with board.connect() as con:\n            con.run('echo \"Hello from $(hostname)!\"')</code></pre> <p>The command echo \"Hello from $(hostname)!\" will be run on each board, and return the corresponding return values.</p> <p>To run use:</p> <pre><code> $automate-run say-hello\n\n Hello from jetsonagx!\n Hello from jetsontx2!\n Hello from raspberrypi4b-jh1!\n Hello from zynqberry!</code></pre>"},{"location":"commandline-interface/automate-run/#access-cross-compiler-information","title":"Access cross compiler information:","text":"<p>If one wants to see the default compiler flags for each compiler one could use:</p> <pre><code>@task\ndef compiler_info(c, board=\"\", toolchain=\"\"):\n    board = c.board(board)\n\n    for compiler in board.compilers(toolchain=toolchain):\n        print(\"compiler:\", compiler.name)\n        print(\"  CC =\", compiler.cc)\n        print(\"  CFLAGS = \", compiler.cflags)\n        print(\"  CXX =\", compiler.cxx)\n        print(\"  CXXFLAGS =\", compiler.cxxflags)\n        print(\"  LDFLAGS =\", compiler.ldflags)\n        print(\"  LDLIBS = \", compiler.libs)\n        print(\"\")</code></pre> <p>To run use: </p> <pre><code>$ automate-run compiler-info -b zynqberry -t gcc\n\ncompiler: aarch32hf-gcc74\n  CC = arm-linux-gnueabihf-gcc\n  CFLAGS =  -mcpu=cortex-a9 --sysroot=/nfs/es-genial/schrank/boards/zynqberry/sysroot -O2\n  CXX = arm-linux-gnueabihf-g++\n  CXXFLAGS = -mcpu=cortex-a9 --sysroot=/nfs/es-genial/schrank/boards/zynqberry/sysroot -O2\n  LDFLAGS = -mcpu=cortex-a9 --sysroot=/nfs/es-genial/schrank/boards/zynqberry/sysroot -O2\n  LDLIBS =</code></pre>"},{"location":"commandline-interface/automate-run/#further-examples","title":"Further examples","text":"<p>The examples from this tutorial and further more advanced examples are available    from the folder examples/python/ in this repository.</p>"},{"location":"commandline-interface/automate/","title":"Commandline Interface","text":"<p>The commandline interface is used for interactive and scripted interaction with the boards. It uses the entry point automate.</p> <pre><code>Usage: automate [--core-opts] &lt;subcommand&gt; [--subcommand-opts] ...\n\nCore options:\n\n  -d, --debug                        Enable debug output.\n  -l [STRING], --list[=STRING]       List available tasks, optionally limited to a namespace.\n  -V, --version                      Show version and exit.</code></pre> <p>Actual tasks are run as subcommands of automate.</p>"},{"location":"commandline-interface/automate/#automate-list","title":"automate list","text":"<p>List available boards and compilers.</p> <pre><code>Usage: automate [--core-opts] list [--options] [other tasks here ...]\n\nDocstring:\n  List available boards and compilers\n\n  -b/--boards: only list boards\n  -c/--compilers: only list compilers</code></pre> <p>Example:</p> <pre><code>$ automate list\nBoards:\nID          Machine       Cores  OS      Connections    Default Compiler\n----------  ----------  -------  ------  -------------  ------------------\njetsonagx   jetsonagx         8  ubuntu  ssh            aarch64-gcc74\nzynqberry   zynqberry         2  debian  ssh            aarch32hf-gcc74\njetsontx2   jetsontx2         6  ubuntu  ssh,uart       aarch64-gcc74\n\nCompiler:\nID               Toolchain    Version    Machines      Multiarch\n---------------  -----------  ---------  ------------  -----------\naarch32hf-gcc74  gcc          7.4.1      arm           yes\naarch32hf-gcc82  gcc          8.2.1      arm           no\naarch32-gcc82    gcc          8.2.1      arm           no\naarch64-gcc55    gcc          5.5.0      aarch64       yes\naarch64-gcc82    gcc          8.2.1      aarch64       no\naarch64-gcc65    gcc          6.5.0      aarch64       yes\naarch64-gcc74    gcc          7.4.1      aarch64       yes\nclang-70         llvm         7.0.1      aarch64, arm  yes\nclang-80         llvm         8.0.1      aarch64, arm  yes\nclang-90         llvm         9.0.0      aarch64, arm  yes</code></pre>"},{"location":"commandline-interface/automate/#board-interaction","title":"Board Interaction","text":"<p>Board interaction commands are defined in namespace board.</p>"},{"location":"commandline-interface/automate/#automate-boardboard-ids","title":"automate board.board-ids","text":"<p>List available board ids. Useful for iterating boards in shell scripts.</p> <pre><code>Usage: automate [--core-opts] board.board-ids [--options] [other tasks here ...]\n\nDocstring:\n  returns list of board_ids suitable for usage in shell scripts\n\n  -f/--filter: filter expression for boards\n\n          Filter expression is prepended with 'lambda board:  ' and then evaluated as a python function\n          board is an object of class Board, only returns board_ids if filter expression is true\n\n          Examples:\n\n          board.machine == 'zynqberry' to only run on zynqberry boards\n\n          board.trylock() to only iterate over boards that are currently\n          unlocked, and lock the boards while iterating</code></pre> <p>Examples:</p> <p>List all available board ids:</p> <pre><code>$automate board.board-ids\njetsonagx\nzynqberry\njetsontx2</code></pre> <p>List only boards with gnueabhif environment (32Bit ARM with floating point):</p> <pre><code>$automate board.board-ids --filter 'board.os.triple.environment.value == gnueabihf'\nzynqberry</code></pre>"},{"location":"commandline-interface/automate/#automate-boardget","title":"automate board.get","text":"<p>Get files from board.</p> <pre><code>Usage: automate [--core-opts] board.get [--options] [other tasks here ...]\n\nDocstring:\n  Get file from board\n\n  -b/--board: target board id\n  -r/--remote: remote file path\n  -l/--local:  local folder or filename (default is current working directory)</code></pre> <p>Examples:</p> <pre><code> automate board.get zynqberry /proc/cpuinfo</code></pre>"},{"location":"commandline-interface/automate/#automate-boardkexec","title":"automate board.kexec","text":"<pre><code>Usage: automate [--core-opts] board.kexec [--options] [other tasks here ...]\n\nDocstring:\n  Start the Linux kernel using kexec\n\n  -b/--board: target board id\n  -k/--kernel-id: target kernel id\n  -a/--append: Append the given string to the commandline\n  -w/--wait: wait until board is reachable via ssh again</code></pre>"},{"location":"commandline-interface/automate/#automate-boardlock","title":"automate board.lock","text":"<pre><code>Usage: automate [--core-opts] board.lock [--options] [other tasks here ...]\n\nDocstring:\n  Lock board\n\n  -b/--board: target board id\n  -t/--timeout: timeout for the lock (deprecated use lease-time)\n  -l/--lease-time: The board is kept locked for at least lease_time\n     Lease time can be given as an int representing seconds or with a suffix\n     d for days, h for hours, m for minutes, s for seconds</code></pre> <p>Example:</p> <pre><code>automate board.lock raspberrypi4b-jh1 -l 2d</code></pre> <p>Lock raspberrypi4b-jh1 for 2 days</p>"},{"location":"commandline-interface/automate/#automate-boardput_","title":"automate board.put_","text":"<pre><code>Usage: automate [--core-opts] board.put [--options] [other tasks here ...]\n\nDocstring:\n  Put file on the board\n\n  -b/--board: target board id\n  -f/--file: local file\n  -r/--remote: remote file path (default is board specific rundir)</code></pre>"},{"location":"commandline-interface/automate/#automate-boardreboot","title":"automate board.reboot","text":"<pre><code> Usage: automate [--core-opts] board.reboot [--options] [other tasks here ...]\n\n Docstring:\n   Reboot  board\n\n   -b/--board: target board id\n   -w/--wait block until the board is reachable via ssh again</code></pre>"},{"location":"commandline-interface/automate/#automate-boardreset","title":"automate board.reset","text":"<pre><code>Usage: automate [--core-opts] board.reset [--options] [other tasks here ...]\n\nDocstring:\n  Hard reset board\n\n  -b/--board: target board id\n  -w/--wait: block until the board is reachable again</code></pre>"},{"location":"commandline-interface/automate/#automate-boardrsync-to","title":"automate board.rsync-to","text":"<pre><code> Usage: automate [--core-opts] board.rsync-to [--options] [other tasks here ...]\n\n Docstring:\n   rsync a folder to the target board by default the\n\n\n   -b/--board: target board id\n   -s/--source: source folder/file\n   -t/--target: target folder/file default is configured rundir on the board\n   -d/--delete: delete files from target that do not exist in the source</code></pre>"},{"location":"commandline-interface/automate/#automate-boardrun","title":"automate board.run","text":"<pre><code>Usage: automate [--core-opts] board.run [--options] [other tasks here ...]\n\nDocstring:\n  Run command remotely\n\n  -b/--board: target board id\n  -c/--command: command to run\n  --cwd: working directory of the command (default is rundir of board)</code></pre>"},{"location":"commandline-interface/automate/#automate-boardshell","title":"automate board.shell","text":"<pre><code>Usage: automate [--core-opts] board.shell [--options] [other tasks here ...]\n\nDocstring:\n  Start a remote shell\n\n  -b/--board: target board id\n\nOptions:\n  -b STRING, --board=STRING</code></pre>"},{"location":"commandline-interface/automate/#automate-boardunlock","title":"automate board.unlock","text":"<pre><code>Usage: automate [--core-opts] board.unlock [--options] [other tasks here ...]\n\nDocstring:\n  Unlock board\n\n  -b/--board: target board id\n\nOptions:\n  -b STRING, --board=STRING</code></pre>"},{"location":"commandline-interface/automate/#builders","title":"Builders","text":"<p>Software for boards can be built using a standard buildsystem. All buildsystem follow the sequence.</p> <ol> <li>automate $buildsystem.configure: to configure the build</li> <li>automate $buildsystem.build: to build software</li> <li>automate $buildsystem.install: to install built software in a defined directory on the host system</li> <li>automate $buildsystem.deploy: to copy the built software to the board</li> </ol> <p>We currently have support for the following Buildsystems available:</p> <ul> <li>cmake: for cmake based software builds</li> <li>make: for Makefile based software builds</li> <li>kernel: to build linux kernels using the kbuild/make base build system</li> </ul>"},{"location":"commandline-interface/automate/#administration-tasks","title":"Administration tasks","text":"<p>Some common administration task are automated in namespace 'admin'</p>"},{"location":"commandline-interface/automate/#automate-adminadd-users","title":"automate admin.add-users","text":"<p>Adds all users ssh keys from 'metadata/users.yml' to all boards and gateways.</p>"},{"location":"commandline-interface/automate/#automate-adminadd-board","title":"automate admin.add-board","text":"<p>Adds a board to the metadata directory. This command connects to the target board and tries to extract the metadata automatically. As this command is not able to extract all information 100% reliably. After extraction an interactive wizard is used for review of the extracted board data.</p> <p>Some board data (especially os.kernel) is not generated automatically. So some features especially kernel building and kexec will not work with the automatically generated board descriptions.</p> <pre><code>Usage: automate [--core-opts] admin.add-board [--options] [other tasks here ...]\n\nDocstring:\n  Add a new board to test rack\n\n  # Arguments\n  --user: username on board\n  --host: hostname or ip address of board\n  --port: port of ssh deamon on board (optional default: 22)\n  --gw-host: hostname of gateway (optional if omitted not gateway is configured)\n  --gw-user: username on gateway (optional if omitted use --user)\n  --gw-port: port of ssh on gateway (optional default: 22)</code></pre>"},{"location":"commandline-interface/automate/#automate-adminsafe-rootfs","title":"automate admin.safe-rootfs","text":"<p>Safe a filesystem image of the root filesystem of a board.</p> <p>Filesystem images are saved in in the path given by attribute os.rootfs of a boards metadata description. Usually the path is: ${boardroot}/${board_name}/${board_name}.img</p> <p>Attention: The rootfs images are taken from the running boards, using a forceful readonly remount of the rootfs before taking the dump. In some cases this might lead to a corrupted state of the filesystem dump.</p> <pre><code>Usage: automate [--core-opts] admin.safe-rootfs [--options]\n\nDocstring:\n  Safe rootfs image of board\n\n  -b/--board: target board name</code></pre>"},{"location":"commandline-interface/automate/#automate-adminbuild-sysroot","title":"automate admin.build-sysroot","text":"<p>Convert the dumped root filesystem to a sysroot for building. Sysroots are not necessary for simple builds, but allow usage of libraries installed from the boards package managers. Especially for C++ usage of sysroots is strongly encouraged, if libstdcxx is linked dynamically as otherwise mismatches between the libstdcxx used for linkage and during runtime will lead to dynamic linker errors for most programs.</p> <p>Sysroots are used by default by the builders, if they exist.</p> <pre><code>Usage: automate [--core-opts] admin.build-sysroot [--options]\n\nDocstring:\n  Build compiler sysroot for board\n\n  -b/--board: target board id</code></pre>"},{"location":"commandline-interface/automate/#examples","title":"Examples","text":"<p>Examples for commandline usage can be found in examples/shell folder of the project.</p>"},{"location":"setup/boards/","title":"Board Setup","text":"<p>To add a new board run:</p> <pre><code>automate admin.add-board --user &lt;username on board&gt; --host &lt;hostname or ip address of board&gt; \\\n    --gw-user &lt;username on test rack gateway&gt; --gw-host &lt;hostname of gateway&gt;</code></pre> <p>Optionally, but recommended:</p> <pre><code>automate board.build-sysroot &lt;boardname&gt;</code></pre>"},{"location":"setup/boards/#installed-tools","title":"Installed Tools","text":"<p>Boards are required to have the following tools installed:</p> <ol> <li>ssh</li> <li>rsync</li> <li>netcat (nc), might need netcat-openbsd apt-get install -y netcat-openbsd</li> <li>perf</li> </ol>"},{"location":"setup/boards/#kernel","title":"Kernel","text":"<p>All of these options are currently optional for all kernels, but we recommend using them for all </p>"},{"location":"setup/boards/#sudo-access","title":"Sudo Access","text":"<p>Some of the tasks (admin.safe-rootfs, kernel.deploy) require root privileges.  It is recommended to configure the board user to allow sudo without password. </p>"},{"location":"setup/boards/#mac-adresses","title":"MAC Adresses","text":"<p>Some of the boards (zynqberry) dynamically assign mac addresses at each reboot.  For proper dhcp support configure a static MAC address. </p> <p>On debian based systems this can be configured in /etc/network/interfaces:</p> <pre><code>#enable eth0 with dhcp and fixed mac address\nauto eth0\niface eth0 inet dhcp\n    hwaddress be:bc:1c:87:3e:3f</code></pre>"},{"location":"setup/database/","title":"Setup PostgreSQL Database Server","text":"<p>This describes a simple gateway configuration assuming a  RHEL/CentOS 7 based system.  Source: https://yallalabs.com/linux/how-to-install-postgresql-10-on-centos-7-rhel-7/</p>"},{"location":"setup/database/#add-postgresql-10-repo-to-yum","title":"Add PostgreSQL 10 Repo to yum","text":"<pre><code>sudo yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm -y`\n</code></pre>"},{"location":"setup/database/#install-postgresql-10","title":"Install PostgreSQL 10","text":"<pre><code>sudo yum install postgresql10 postgresql10-server postgresql10-contrib postgresql10-libs -y\n</code></pre>"},{"location":"setup/database/#initialize-and-start-postgresql-server","title":"Initialize and Start PostgreSQL Server","text":"<pre><code>sudo /usr/pgsql-10/bin/postgresql-10-setup initdb\nsudo systemctl enable postgresql-10.service\nsudo systemctl start postgresql-10.service\n</code></pre>"},{"location":"setup/database/#login-into-postgresql-server","title":"Login into PostgreSQL Server","text":"<pre><code>sudo su - postgres\npsql\n</code></pre>"},{"location":"setup/database/#change-postgresql-config","title":"Change PostgreSQL config","text":"<p>In <code>/var/lib/pgsql/10/data/pg_hba.conf</code> change the following lines from</p> <pre><code>local   all             all                                     peer\n# IPv4 local connections:\nhost    all             all             127.0.0.1/32            ident\n# IPv6 local connections:\nhost    all             all             ::1/128                 ident\n</code></pre> <p>to</p> <pre><code># Database administrative login by Unix domain socket\nlocal   all             postgres                                peer\n# \"local\" is for Unix domain socket connections only\nlocal   all             all                                     md5\n# IPv4 local connections:\nhost    all             all             127.0.0.1/32            md5\n# # IPv6 local connections:\nhost    all             all             ::1/128                 md5\n</code></pre> <p>to allow password authentification</p> <p>Restart PostgreSQL server:</p> <pre><code>sudo systemctl restart postgresql-10.service\n</code></pre>"},{"location":"setup/database/#setup-database","title":"Setup Database","text":"<p>In the create_postgres_db.sh change <code>DATABASE</code>, <code>USER</code>, and <code>PASSWORD</code> and execute the script to create the automate database. Login in as user <code>postgres</code> and run the script:</p> <pre><code>sudo su - postgres\n./create_postgres_db.sh\n</code></pre>"},{"location":"setup/database/#connect-to-database","title":"Connect to Database","text":"<p>Add <code>DATABASE</code>, <code>USER</code>, and <code>PASSWORD</code> to your <code>automate.yml</code> and if necessary activate a proper port forwarding. </p> <p>To initialize the database tables run:</p> <pre><code>    automate database.init\n</code></pre>"},{"location":"setup/gateway/","title":"Gatway Configuration","text":"<p>This describes a simple gateway configuration assuming a  RHEL  based system.</p>"},{"location":"setup/gateway/#disable-network-manager-for-the-interface","title":"Disable Network Manager for the interface","text":"<p>All boards are part of a network (10.42.0.0/24) administered by the gateway. The board network is connected to a dedicated network interface of the gateway. To assign a static IP address to the network interface get the name and MAC address of the network interface by executing:</p> <pre><code>ifconfig -a</code></pre> <p>Edit or add the file in <code>/etc/sysconfig/network-scripts/ifcfg-IF_NAME</code> corresponding to your device and replace all content of the file with the following:</p> <pre><code>TYPE=Ethernet\nDEFROUTE=no\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=shared\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nHWADDR=xx:xx:xx:xx:xx:xx\nONBOOT=yes\nIPV6_ADDR_GEN_MODE=stable-privacy\nIPV6_PRIVACY=no\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=shared\nNM_CONTROLLED=no\nNETMASK=255.255.255.0\nIPADDR=10.42.0.1\nZONE=dmz</code></pre>"},{"location":"setup/gateway/#disable-network-manager-dnsmasq","title":"Disable Network Manager dnsmasq","text":"<p>By default Network Manager runs a DNS/DHCP server. This DNS server has to be disabled by editing <code>/etc/NetworkManager/NetworkManager.conf</code>. Under section <code>[main]</code> add the following line to the config file:</p> <pre><code>dns=none</code></pre> <p>Reboot the computer:</p> <pre><code>shutdown -r now</code></pre>"},{"location":"setup/gateway/#enable-dnsmasq","title":"Enable dnsmasq","text":"<p>To enable dnsmasq use:</p> <pre><code>yum install dnsmasq\nsystemctl enable dnsmasq</code></pre>"},{"location":"setup/gateway/#configure-dnsmasq","title":"Configure dnsmasq","text":"<p>Add the following in <code>/etc/dnsmasq.d/derschrank.conf</code></p> <pre><code>listen-address=10.42.0.1,::1,127.0.0.1\nport=53\ninterface=IF_NAME\nbind-interfaces\ndomain-needed\nexpand-hosts\nserver=134.2.12.15\nserver=134.2.12.4\nserver=134.2.12.17\n\ndhcp-range=10.42.0.10,10.42.0.150,72h\ndhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases\ndhcp-authoritative\ndhcp-option=option:ntp-server,134.2.10.50,134.2.12.2,134.2.14.2</code></pre> <p>To syntax check the commandline do:</p> <pre><code>dnsmasq --test</code></pre> <p>And apply the changes with:</p> <pre><code>systemctl restart dnsmasq\nsystemctl status dnsmasq</code></pre> <p>When a new board is installed and joins the network. The hostname, MAC address, and IP address can be found in: <code>/var/lib/dnsmasq/dnsmasq.leases</code>. To assign a static IP to a board add the following line to <code>/etc/dnsmasq.d/derschrank.conf</code>: </p> <pre><code>dhcp-host=yy:yy:yy:yy:yy:yy,boardhostname,10.42.0.YY</code></pre> <p>In order to make the locallay installed dnsmasq server the primary DNS server edit <code>/etc/resolv.conf</code> with the following line:</p> <pre><code>nameserver 127.0.0.1\nsearch your.localdomain.com</code></pre>"},{"location":"setup/gateway/#configure-nat-forwarding","title":"Configure NAT forwarding","text":"<pre><code> yum install firewalld\n systemctl enable firewalld\n systemctl start firewalld\n systemctl status firewalld</code></pre>"},{"location":"setup/gateway/#configure-dmz","title":"Configure DMZ","text":"<pre><code>firewall-cmd --zone=dmz --add-service=ntp  --permanent\nfirewall-cmd --zone=dmz --add-service=dhcp --permanent\nfirewall-cmd --zone=dmz --add-service=dns  --permanent\nfirewall-cmd --zone=dmz --add-service=http --permanent\nfirewall-cmd --zone=dmz --add-service=https --permanent\nfirewall-cmd --zone=dmz --remove-service=ssh --permanent\n\nfirewall-cmd --reload</code></pre>"},{"location":"setup/gateway/#configure-public-zone","title":"Configure Public Zone","text":"<p>If gateway is a normal staff host you might want to enable usual stuff:</p> <pre><code>firewall-cmd --zone=public --add-service=nfs --permanent\nfirewall-cmd --zone=public --add-service=nfs3 --permanent\nfirewall-cmd --zone=public --add-service=mdns --permanent\nfirewall-cmd --zone=public --add-service=samba-client --permanent\n\nfirewall-cmd --permanent --new-service=afs-client\nfirewall-cmd --permanent --service=afs-client --set-description=\"Allows to use afs cache manager\"\nfirewall-cmd --permanent --service=afs-client --add-port=7001/udp\nfirewall-cmd --permanent --service=afs-client --add-port=7001/tcp\nfirewall-cmd --zone=public --add-service=afs-client --permanent\n\nfirewall-cmd --zone=public --add-service=ipp --permanent\nfirewall-cmd --reload</code></pre>"},{"location":"setup/gateway/#configure-masquerading","title":"Configure masquerading","text":"<pre><code>firewall-cmd --zone=public --add-rich-rule=\"rule family=ipv4 source address=10.42.0.0/24 masquerade\" --permanent\nfirewall-cmd --reload</code></pre> <p>FIXME: this rule is too permissive to allow untrusted users on the boards.</p> <p>This would probably need direct rules  https://www.lisenet.com/2016/firewalld-rich-and-direct-rules-setup-rhel-7-server-as-a-router/</p> <p>Or maybe just disable masquerading and install an ntp server on the gateway.</p>"}]}