{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Automate Getting Started To get started: Update submodules: git submodule update --init --recursive Install poetry python3 -m pip install poetry --user Install automate in development mode: poetry install To enable experimental database support use: poetry install -E postgres Start the development shell poetry shell Copy the configuration file: cp automate.yml ~/.automate.yml And adopt the settings of the configuration file. List available boards automate list View Documentation inv doc","title":"Home"},{"location":"#automate","text":"","title":"Automate"},{"location":"#getting-started","text":"To get started: Update submodules: git submodule update --init --recursive Install poetry python3 -m pip install poetry --user Install automate in development mode: poetry install To enable experimental database support use: poetry install -E postgres Start the development shell poetry shell Copy the configuration file: cp automate.yml ~/.automate.yml And adopt the settings of the configuration file. List available boards automate list View Documentation inv doc","title":"Getting Started"},{"location":"configuration/","text":"Configuration Options Configuration is saved in ~/.automate.yml . It has the following sections. automate metadata: Location of metadata .yml files metadata_url: Url of git repository containing the central metdata repository (ignored if metdata folder exists and is not a git repository) metadata_ref: Git branch or tag of metadata (ignored if metadata folder exists and is not a git repository) identity: (Optional) Path of ssh private key to use toolroot: installation of tools boardroot: Location of saved board data (Kernel SOurces, Kernel Buildds, Device Trees) database: Database Configuration forwards: List of port forwardings database host: host of database server port: port of database server db: name of database to use user: username for database server password: password for database server forwards host: remote host for forwards user: username for remote host local_port: local port to forwardings remote_port: remote_port to forward logging level: loglevel for system one of ERROR, WARNING, INFO, DEBUG Example Configuration An example configuration file might be: automate: metadata: /local/data/der_schrank/metadata identity: ~/.ssh/id_rsa toolroot: /afs/wsi/es/tools/ boardroot: /nfs/es-genial/schrank/boards/ database: host: localhost port: 5433 db: der_schrank user: der_schrank password: der_schrank forwards: - host: chichi.informatik.uni-tuebingen.de user: gerum local_port: 5433 remote_port: 5433 logging: level: ERROR","title":"Configuration"},{"location":"configuration/#configuration-options","text":"Configuration is saved in ~/.automate.yml . It has the following sections.","title":"Configuration Options"},{"location":"configuration/#automate","text":"metadata: Location of metadata .yml files metadata_url: Url of git repository containing the central metdata repository (ignored if metdata folder exists and is not a git repository) metadata_ref: Git branch or tag of metadata (ignored if metadata folder exists and is not a git repository) identity: (Optional) Path of ssh private key to use toolroot: installation of tools boardroot: Location of saved board data (Kernel SOurces, Kernel Buildds, Device Trees) database: Database Configuration forwards: List of port forwardings","title":"automate"},{"location":"configuration/#database","text":"host: host of database server port: port of database server db: name of database to use user: username for database server password: password for database server","title":"database"},{"location":"configuration/#forwards","text":"host: remote host for forwards user: username for remote host local_port: local port to forwardings remote_port: remote_port to forward","title":"forwards"},{"location":"configuration/#logging","text":"level: loglevel for system one of ERROR, WARNING, INFO, DEBUG","title":"logging"},{"location":"configuration/#example-configuration","text":"An example configuration file might be: automate: metadata: /local/data/der_schrank/metadata identity: ~/.ssh/id_rsa toolroot: /afs/wsi/es/tools/ boardroot: /nfs/es-genial/schrank/boards/ database: host: localhost port: 5433 db: der_schrank user: der_schrank password: der_schrank forwards: - host: chichi.informatik.uni-tuebingen.de user: gerum local_port: 5433 remote_port: 5433 logging: level: ERROR","title":"Example Configuration"},{"location":"development/","text":"Development To get a common development environment this project uses poetry To get started just run: poetry install poetry shell To add a dependency use: poetry add $package To add a development dependency use: poetry add --dev $package To update the package dependencies use: poetry up For automation of common development tasks (testing, deployment, ..) we use pyinvoke . The complete list of currently defined tasks can be shown by running inv --list Test Suite To run the integration tests use: inv test Static Type Hints Where applicable this project uses type hints to allow, static type checking and error detection. The typechecking is invoked through: inv mypy Additionally static type information can be derived from the unittest suite using monkeytype. inv monkeytype This command executes the test suite and derives traces dynamically used types. Then you can use monkeytype to automatically annotate the modules with type information using: monkeytype list-modules monkeytype stub $module monkeytype apply $module Codestyle This project uses black to enforce a common codestyle throughout the project. Reformatting can be invoked through: inv black It is recommended to configure your editor to autmatically reload changed files Pre-Commit Hooks Static Typechecking, and blackening can be run as pre-commit hooks. These are installed using: inv pre-commit","title":"Development"},{"location":"development/#development","text":"To get a common development environment this project uses poetry To get started just run: poetry install poetry shell To add a dependency use: poetry add $package To add a development dependency use: poetry add --dev $package To update the package dependencies use: poetry up For automation of common development tasks (testing, deployment, ..) we use pyinvoke . The complete list of currently defined tasks can be shown by running inv --list","title":"Development"},{"location":"development/#test-suite","text":"To run the integration tests use: inv test","title":"Test Suite"},{"location":"development/#static-type-hints","text":"Where applicable this project uses type hints to allow, static type checking and error detection. The typechecking is invoked through: inv mypy Additionally static type information can be derived from the unittest suite using monkeytype. inv monkeytype This command executes the test suite and derives traces dynamically used types. Then you can use monkeytype to automatically annotate the modules with type information using: monkeytype list-modules monkeytype stub $module monkeytype apply $module","title":"Static Type Hints"},{"location":"development/#codestyle","text":"This project uses black to enforce a common codestyle throughout the project. Reformatting can be invoked through: inv black It is recommended to configure your editor to autmatically reload changed files","title":"Codestyle"},{"location":"development/#pre-commit-hooks","text":"Static Typechecking, and blackening can be run as pre-commit hooks. These are installed using: inv pre-commit","title":"Pre-Commit Hooks"},{"location":"metadata-model/","text":"Metadata Model The necessary metadata for cross compilation and benchmark execution is stored in a common metadata model. Metadata can either be read from a local directory selected by metadata in automate.yml config file or in a postgres SQL database. Users See automate/model/users.py Users are stored as a Dict of \" Str \" -> \" UserModel \". Mapping user names to UserObjects. The user names can be chosen arbitrarily, but if a the systems uses a common user database, it is recommended, that the usernames map to system user names. Each users model has the following attributes: Name Type Description name str Full name of user mail str email address of user public_keys List[str] List of ssh public_keys used for authorization of the user Boards Boards are represented by an instance of BoardModel see automate/model/board.py . Name Type Description name str main unique identifier of a single board instance, chose a unique board name for each instance physical board board str unique identifier for a board type should be the same for each instance of the same board type hostname str hostname of the board as defined in /etc/hostname and /etc/hosts mac_address str MAC address of the main ethernet connection of the board. For multiple ethernet adapters chose the one connected to the gatway description str Short human readable description of the board and its configuration rundir Path directory on the board used for running the binaries and storing temporary results doc List List of documentation links gateway GatewayModel Describes connection to the boards gateway server connections List List of ssh or uart connections usable with this board, all connections are forwarded over the boards gateway cores List List of core models describing each cpu core on the board that is usable by the OS of the board os OSModel Describes the OS Kernel and Rootfs configuration see: OS soc SOCModel Describes the SOC used on a board see: SoC power_supply PowerSupplyModel Describes the power supply requirements for the board see: Power Supply Documentation Links Provides a link to external or internal Documentation of a board, defined in DocumentationLinkModel . It has the following attributes: Name Type Description title str Short description or title of the linked documentation location HttpURL or Path HttpURL to external Documentation or Path to shared file storage for shared documentation Cores Describes a CPU-Core of the SoC. Name Type Description num/os_id int number of the cpu in the enumeration scheme of the boards os e.g. number used for taskset -C and core isolation isa str short identifier of the cores instruction set architecture uarch str short identifier of the cores microarchitecture vendor/implementer str name of the cpu vendor extensions List[str] List of cpu isa extensions as reported by /proc/cpuinfo description str Short human readable description of the core and its main features Currently we only describe main cores of the SoC that are under control of the OS-Scheduler, might be used to also describe accelerator/gpu cores in the future. OS Describes the Configuration of the Operating System Kernel and RootFS. Is defined by OSModel in automate/models/board.py . Name Type Description triple TripleModel Default compiler target triple for this OS/Rootfs distribution str Name of the distribution this rootfs is based on, should correspond to ID from /etc/os-release release str Identifier for the os release, should correspond to VERSION or VERSION_CODENAME from /etc/os-release description str Short human readable description of the OS sysroot Path Path to a mirror of the relevant parts of the rootfs for cross compilation and linkage with distribution provided libraries rootfs Path Path to a snapshot of the rootfs of the system multiarch bool this rootfs uses a multiarch layout should probably be true only for debian based rootfes kernels List List of Kernels supported by this OS Image Kernel The runtime and build configuration of kernels is described using KernelModel from automate/models/board.py . Name Type Description name str Unique identifier for this kernel config description str Short human readable description of this kernel config commandline str Default commandline of this kernel should correspond to output of uname -r config/kernel_config Path Path to copy of the kernel build configuration file in shared data folder source/kernel_source Path Path to the kernel source tarball in shared data folder srcdir/kernel_srcdir Path Relative Path to kernel source directory in extracted kernel source tarball image KernelImageModel uboot UBootModel default bool This kernel is started at board power up. Notes default : If we have not configured the default kernel for a board this might be false for all kernels. In this case the kernels are only usable using automate board.kexec . SoC Currently Optional: TBD Power Supply Currently Optional: TBD Compiler Model Metadata format for compilers has not been frozen yet: TBD","title":"Metadata Model"},{"location":"metadata-model/#metadata-model","text":"The necessary metadata for cross compilation and benchmark execution is stored in a common metadata model. Metadata can either be read from a local directory selected by metadata in automate.yml config file or in a postgres SQL database.","title":"Metadata Model"},{"location":"metadata-model/#users","text":"See automate/model/users.py Users are stored as a Dict of \" Str \" -> \" UserModel \". Mapping user names to UserObjects. The user names can be chosen arbitrarily, but if a the systems uses a common user database, it is recommended, that the usernames map to system user names. Each users model has the following attributes: Name Type Description name str Full name of user mail str email address of user public_keys List[str] List of ssh public_keys used for authorization of the user","title":"Users"},{"location":"metadata-model/#boards","text":"Boards are represented by an instance of BoardModel see automate/model/board.py . Name Type Description name str main unique identifier of a single board instance, chose a unique board name for each instance physical board board str unique identifier for a board type should be the same for each instance of the same board type hostname str hostname of the board as defined in /etc/hostname and /etc/hosts mac_address str MAC address of the main ethernet connection of the board. For multiple ethernet adapters chose the one connected to the gatway description str Short human readable description of the board and its configuration rundir Path directory on the board used for running the binaries and storing temporary results doc List List of documentation links gateway GatewayModel Describes connection to the boards gateway server connections List List of ssh or uart connections usable with this board, all connections are forwarded over the boards gateway cores List List of core models describing each cpu core on the board that is usable by the OS of the board os OSModel Describes the OS Kernel and Rootfs configuration see: OS soc SOCModel Describes the SOC used on a board see: SoC power_supply PowerSupplyModel Describes the power supply requirements for the board see: Power Supply","title":"Boards"},{"location":"metadata-model/#documentation-links","text":"Provides a link to external or internal Documentation of a board, defined in DocumentationLinkModel . It has the following attributes: Name Type Description title str Short description or title of the linked documentation location HttpURL or Path HttpURL to external Documentation or Path to shared file storage for shared documentation","title":"Documentation Links"},{"location":"metadata-model/#cores","text":"Describes a CPU-Core of the SoC. Name Type Description num/os_id int number of the cpu in the enumeration scheme of the boards os e.g. number used for taskset -C and core isolation isa str short identifier of the cores instruction set architecture uarch str short identifier of the cores microarchitecture vendor/implementer str name of the cpu vendor extensions List[str] List of cpu isa extensions as reported by /proc/cpuinfo description str Short human readable description of the core and its main features Currently we only describe main cores of the SoC that are under control of the OS-Scheduler, might be used to also describe accelerator/gpu cores in the future.","title":"Cores"},{"location":"metadata-model/#os","text":"Describes the Configuration of the Operating System Kernel and RootFS. Is defined by OSModel in automate/models/board.py . Name Type Description triple TripleModel Default compiler target triple for this OS/Rootfs distribution str Name of the distribution this rootfs is based on, should correspond to ID from /etc/os-release release str Identifier for the os release, should correspond to VERSION or VERSION_CODENAME from /etc/os-release description str Short human readable description of the OS sysroot Path Path to a mirror of the relevant parts of the rootfs for cross compilation and linkage with distribution provided libraries rootfs Path Path to a snapshot of the rootfs of the system multiarch bool this rootfs uses a multiarch layout should probably be true only for debian based rootfes kernels List List of Kernels supported by this OS Image","title":"OS"},{"location":"metadata-model/#kernel","text":"The runtime and build configuration of kernels is described using KernelModel from automate/models/board.py . Name Type Description name str Unique identifier for this kernel config description str Short human readable description of this kernel config commandline str Default commandline of this kernel should correspond to output of uname -r config/kernel_config Path Path to copy of the kernel build configuration file in shared data folder source/kernel_source Path Path to the kernel source tarball in shared data folder srcdir/kernel_srcdir Path Relative Path to kernel source directory in extracted kernel source tarball image KernelImageModel uboot UBootModel default bool This kernel is started at board power up.","title":"Kernel"},{"location":"metadata-model/#notes","text":"default : If we have not configured the default kernel for a board this might be false for all kernels. In this case the kernels are only usable using automate board.kexec .","title":"Notes"},{"location":"metadata-model/#soc","text":"Currently Optional: TBD","title":"SoC"},{"location":"metadata-model/#power-supply","text":"Currently Optional: TBD","title":"Power Supply"},{"location":"metadata-model/#compiler-model","text":"Metadata format for compilers has not been frozen yet: TBD","title":"Compiler Model"},{"location":"api-documentation/boards/","text":"automate.board _ConnectionContextManager Objects class _ConnectionContextManager(AbstractContextManager) Context manager for board connections to allow reuse of board connections __getattr__ def __getattr__(attr: str) -> Any proxy model properties if they are not shadowed by an own property Board Objects class Board(object) Automation Class for script based interaction with boards: Provides access to: - board data - board automation: upload, execution, reboot, reset, ... - board specific cross compilers compiler def compiler( compiler_name: str = \"\", toolchain: Union[Toolchain, str] = Toolchain.GCC) -> CrossCompiler Build a Cross Compiler Object for this board By default uses newest gcc compiler available in metadata. Arguments compiler_name : use a specifc compiler id toolchain : use newest configured compiler Returns Object of class automate.compiler.CrossCompiler configured to run builds for this board compilers def compilers( toolchain: Union[Toolchain, None, str] = None) -> List[CrossCompiler] Build list of cross compiler objects configured for this board Arguments toolchain : Only build cross compilers from the given toolchain Returns List of configured cross compilers connect def connect(type: str = \"ssh\", timeout: int = 30) -> Connection Return a fabric.Connection to the board. Arguments type : connection type currently only \"ssh\" is supportted timeout : timeout unitl connection should be established Returns /fabric.Connection/ to the board reboot def reboot(wait=True) -> Union[Connection, None] Starts a new connection to the device and initiates a reboot Arguments wait : If wait is true tries to start a new connection, waits until connecting succeeds, and returns a new connection. Returns If wait was given a new connection is Returned wait_for_connection def wait_for_connection() -> Connection Wait until a successful ssh connection to the board can be established Returns A new fabric.Connection object reset def reset(wait=True) -> Union[Connection, None] Hard-Reset the board TODO: Currently not implemented Arguments wait : if true wait until the board is connectible again Returns If wait was true a new Connection object homedir def homedir() -> Path Return the home directory of the connected user Returns pathlib.Path : home directory kexec def kexec(kernel_name=\"\", append=\"\", commandline=\"\", wait=True) -> Union[Connection, None] Start a board kernel using kexec Arguments kernel_name : unique name of the kernel to boot append : string of addition kernel commandline flags commandline : completely new kernel commandline wait : block unitl board is reachable via ssh again and reconnect Returns if wait was given a new fabric.Connection is returned kernel_data def kernel_data(name: str) -> Union[KernelData, None] Information about the installed kernels Arguments name : kernel name for which information should be returned Returns KernelData object for the kernel configration builder def builder(typ, builddir: Union[Path, str] = \"\") -> BaseBuilder Return a builder object for this board Arguments typ : Type of the buildsystem to use choices are cmake, kernel, make Returns configured builder object __getattr__ def __getattr__(attr: str) -> Any proxy model properties if they are not shadowed by an own property","title":"Boards"},{"location":"api-documentation/boards/#automateboard","text":"","title":"automate.board"},{"location":"api-documentation/boards/#_connectioncontextmanager-objects","text":"class _ConnectionContextManager(AbstractContextManager) Context manager for board connections to allow reuse of board connections","title":"_ConnectionContextManager Objects"},{"location":"api-documentation/boards/#__getattr__","text":"def __getattr__(attr: str) -> Any proxy model properties if they are not shadowed by an own property","title":"__getattr__"},{"location":"api-documentation/boards/#board-objects","text":"class Board(object) Automation Class for script based interaction with boards: Provides access to: - board data - board automation: upload, execution, reboot, reset, ... - board specific cross compilers","title":"Board Objects"},{"location":"api-documentation/boards/#compiler","text":"def compiler( compiler_name: str = \"\", toolchain: Union[Toolchain, str] = Toolchain.GCC) -> CrossCompiler Build a Cross Compiler Object for this board By default uses newest gcc compiler available in metadata. Arguments compiler_name : use a specifc compiler id toolchain : use newest configured compiler Returns Object of class automate.compiler.CrossCompiler configured to run builds for this board","title":"compiler"},{"location":"api-documentation/boards/#compilers","text":"def compilers( toolchain: Union[Toolchain, None, str] = None) -> List[CrossCompiler] Build list of cross compiler objects configured for this board Arguments toolchain : Only build cross compilers from the given toolchain Returns List of configured cross compilers","title":"compilers"},{"location":"api-documentation/boards/#connect","text":"def connect(type: str = \"ssh\", timeout: int = 30) -> Connection Return a fabric.Connection to the board. Arguments type : connection type currently only \"ssh\" is supportted timeout : timeout unitl connection should be established Returns /fabric.Connection/ to the board","title":"connect"},{"location":"api-documentation/boards/#reboot","text":"def reboot(wait=True) -> Union[Connection, None] Starts a new connection to the device and initiates a reboot Arguments wait : If wait is true tries to start a new connection, waits until connecting succeeds, and returns a new connection. Returns If wait was given a new connection is Returned","title":"reboot"},{"location":"api-documentation/boards/#wait_for_connection","text":"def wait_for_connection() -> Connection Wait until a successful ssh connection to the board can be established Returns A new fabric.Connection object","title":"wait_for_connection"},{"location":"api-documentation/boards/#reset","text":"def reset(wait=True) -> Union[Connection, None] Hard-Reset the board TODO: Currently not implemented Arguments wait : if true wait until the board is connectible again Returns If wait was true a new Connection object","title":"reset"},{"location":"api-documentation/boards/#homedir","text":"def homedir() -> Path Return the home directory of the connected user Returns pathlib.Path : home directory","title":"homedir"},{"location":"api-documentation/boards/#kexec","text":"def kexec(kernel_name=\"\", append=\"\", commandline=\"\", wait=True) -> Union[Connection, None] Start a board kernel using kexec Arguments kernel_name : unique name of the kernel to boot append : string of addition kernel commandline flags commandline : completely new kernel commandline wait : block unitl board is reachable via ssh again and reconnect Returns if wait was given a new fabric.Connection is returned","title":"kexec"},{"location":"api-documentation/boards/#kernel_data","text":"def kernel_data(name: str) -> Union[KernelData, None] Information about the installed kernels Arguments name : kernel name for which information should be returned Returns KernelData object for the kernel configration","title":"kernel_data"},{"location":"api-documentation/boards/#builder","text":"def builder(typ, builddir: Union[Path, str] = \"\") -> BaseBuilder Return a builder object for this board Arguments typ : Type of the buildsystem to use choices are cmake, kernel, make Returns configured builder object","title":"builder"},{"location":"api-documentation/boards/#__getattr___1","text":"def __getattr__(attr: str) -> Any proxy model properties if they are not shadowed by an own property","title":"__getattr__"},{"location":"api-documentation/cross-compilers/","text":"automate.compiler Compiler Objects class Compiler(object) Represents an unconfigured generic compiler triples @property def triples() -> List[TripleModel] List of supported triples version @property def version() -> VersionString Compiler version multiarch @property def multiarch() -> bool Wether this compiler supports multiarch rootfs bin_path @property def bin_path() -> Path Installation path of compiler tools prefix @property def prefix() Prefix of compiler tools eg: arm-linux-gnueabihf cc @property def cc() -> str Binary name of C compiler cxx @property def cxx() -> str Binary name of C++ compiler asm @property def asm() -> str Binary name of assembler ld @property def ld() -> str Binary name of Linker ar @property def ar() -> str Binary name of Archiver toolchain @property def toolchain() -> Toolchain Toolchain family of the compiler eg. LLVM or GCC id @property def id() -> str Unique identifier of compiler in metadata name @property def name() -> str Unique identifier of compiler in metadata CrossCompiler Objects class CrossCompiler(Compiler) Represents a Compiler with board specific configuration configure_extend def configure_extend(flags: Optional[str] = None, cflags: Optional[str] = None, cxxflags: Optional[str] = None, ldflags: Optional[str] = None, libs: Optional[str] = None) -> None Extend compiler flags For arguments see configure configure def configure(flags: Optional[str] = None, cflags: Optional[str] = None, cxxflags: Optional[str] = None, ldflags: Optional[str] = None, libs: Optional[str] = None, uarch_opt=True, isa_opt=True, enable_sysroot=True) -> None Set compiler options Arguments flags : Basic flags (used for compilation and linkags) cflags : flags for C compiler cxxflags : flags for C++ compiler ldflags : flags for linker (linker is assumed to call C/C++-Compiler) libs : Additional libraries to link (some builds might need -lrt) uarch_opt : Enable microarchitecture specific optimizations isa_opt : Enable isa specific optimizations enable_sysroot : Link and build with --sysroot set to a dump of the boards root file system, linkers and cmake will link to libraries installed on the board gcc_toolchain @property def gcc_toolchain() -> Union[None, \"CrossCompiler\"] GCC toolchain to use for LLVM based cross compilers The gcc toolchain is used to provide the linker, and the runtime libraries libgcc and libstdc++ os @property def os() -> OS OS part of compiler target triple machine @property def machine() -> Machine Machine part of compiler target triple environment @property def environment() -> Environment Environment part of compiler target triple isa_flags @property def isa_flags() -> str Default isa specific flags for this board if enabled uarch_flags @property def uarch_flags() -> str Default microarchitecture specific flags for this board if enabled uarch_or_isa_flags @property def uarch_or_isa_flags() -> str Default flags machine specific flags for this board if enabled sysroot @property def sysroot() -> Union[Path, str] Sysroot flag for this compiler and board valid @property def valid() -> bool Boolean flag wether this compiler is expected to generate working executables base_flags @property def base_flags() -> str basic flags shared between C/C++ compiler and Linker cflags @property def cflags() -> str CFLAGS for this compiler cxxflags @property def cxxflags() -> str CXXFLAGS for this compiler ldflags @property def ldflags() LDFLAGS for this compiler These flags are appended to the linker commandline before object files libs @property def libs() -> str LIBFLAGS for this compiler These flags are appended to the linker driver commandline after the objectfiles Currently not used default_builddir @property def default_builddir() -> Path The default build directory for this cross compiler / board combinarion For now this is just \" /builds/ \"","title":"Cross Compilers"},{"location":"api-documentation/cross-compilers/#automatecompiler","text":"","title":"automate.compiler"},{"location":"api-documentation/cross-compilers/#compiler-objects","text":"class Compiler(object) Represents an unconfigured generic compiler","title":"Compiler Objects"},{"location":"api-documentation/cross-compilers/#triples","text":"@property def triples() -> List[TripleModel] List of supported triples","title":"triples"},{"location":"api-documentation/cross-compilers/#version","text":"@property def version() -> VersionString Compiler version","title":"version"},{"location":"api-documentation/cross-compilers/#multiarch","text":"@property def multiarch() -> bool Wether this compiler supports multiarch rootfs","title":"multiarch"},{"location":"api-documentation/cross-compilers/#bin_path","text":"@property def bin_path() -> Path Installation path of compiler tools","title":"bin_path"},{"location":"api-documentation/cross-compilers/#prefix","text":"@property def prefix() Prefix of compiler tools eg: arm-linux-gnueabihf","title":"prefix"},{"location":"api-documentation/cross-compilers/#cc","text":"@property def cc() -> str Binary name of C compiler","title":"cc"},{"location":"api-documentation/cross-compilers/#cxx","text":"@property def cxx() -> str Binary name of C++ compiler","title":"cxx"},{"location":"api-documentation/cross-compilers/#asm","text":"@property def asm() -> str Binary name of assembler","title":"asm"},{"location":"api-documentation/cross-compilers/#ld","text":"@property def ld() -> str Binary name of Linker","title":"ld"},{"location":"api-documentation/cross-compilers/#ar","text":"@property def ar() -> str Binary name of Archiver","title":"ar"},{"location":"api-documentation/cross-compilers/#toolchain","text":"@property def toolchain() -> Toolchain Toolchain family of the compiler eg. LLVM or GCC","title":"toolchain"},{"location":"api-documentation/cross-compilers/#id","text":"@property def id() -> str Unique identifier of compiler in metadata","title":"id"},{"location":"api-documentation/cross-compilers/#name","text":"@property def name() -> str Unique identifier of compiler in metadata","title":"name"},{"location":"api-documentation/cross-compilers/#crosscompiler-objects","text":"class CrossCompiler(Compiler) Represents a Compiler with board specific configuration","title":"CrossCompiler Objects"},{"location":"api-documentation/cross-compilers/#configure_extend","text":"def configure_extend(flags: Optional[str] = None, cflags: Optional[str] = None, cxxflags: Optional[str] = None, ldflags: Optional[str] = None, libs: Optional[str] = None) -> None Extend compiler flags For arguments see configure","title":"configure_extend"},{"location":"api-documentation/cross-compilers/#configure","text":"def configure(flags: Optional[str] = None, cflags: Optional[str] = None, cxxflags: Optional[str] = None, ldflags: Optional[str] = None, libs: Optional[str] = None, uarch_opt=True, isa_opt=True, enable_sysroot=True) -> None Set compiler options Arguments flags : Basic flags (used for compilation and linkags) cflags : flags for C compiler cxxflags : flags for C++ compiler ldflags : flags for linker (linker is assumed to call C/C++-Compiler) libs : Additional libraries to link (some builds might need -lrt) uarch_opt : Enable microarchitecture specific optimizations isa_opt : Enable isa specific optimizations enable_sysroot : Link and build with --sysroot set to a dump of the boards root file system, linkers and cmake will link to libraries installed on the board","title":"configure"},{"location":"api-documentation/cross-compilers/#gcc_toolchain","text":"@property def gcc_toolchain() -> Union[None, \"CrossCompiler\"] GCC toolchain to use for LLVM based cross compilers The gcc toolchain is used to provide the linker, and the runtime libraries libgcc and libstdc++","title":"gcc_toolchain"},{"location":"api-documentation/cross-compilers/#os","text":"@property def os() -> OS OS part of compiler target triple","title":"os"},{"location":"api-documentation/cross-compilers/#machine","text":"@property def machine() -> Machine Machine part of compiler target triple","title":"machine"},{"location":"api-documentation/cross-compilers/#environment","text":"@property def environment() -> Environment Environment part of compiler target triple","title":"environment"},{"location":"api-documentation/cross-compilers/#isa_flags","text":"@property def isa_flags() -> str Default isa specific flags for this board if enabled","title":"isa_flags"},{"location":"api-documentation/cross-compilers/#uarch_flags","text":"@property def uarch_flags() -> str Default microarchitecture specific flags for this board if enabled","title":"uarch_flags"},{"location":"api-documentation/cross-compilers/#uarch_or_isa_flags","text":"@property def uarch_or_isa_flags() -> str Default flags machine specific flags for this board if enabled","title":"uarch_or_isa_flags"},{"location":"api-documentation/cross-compilers/#sysroot","text":"@property def sysroot() -> Union[Path, str] Sysroot flag for this compiler and board","title":"sysroot"},{"location":"api-documentation/cross-compilers/#valid","text":"@property def valid() -> bool Boolean flag wether this compiler is expected to generate working executables","title":"valid"},{"location":"api-documentation/cross-compilers/#base_flags","text":"@property def base_flags() -> str basic flags shared between C/C++ compiler and Linker","title":"base_flags"},{"location":"api-documentation/cross-compilers/#cflags","text":"@property def cflags() -> str CFLAGS for this compiler","title":"cflags"},{"location":"api-documentation/cross-compilers/#cxxflags","text":"@property def cxxflags() -> str CXXFLAGS for this compiler","title":"cxxflags"},{"location":"api-documentation/cross-compilers/#ldflags","text":"@property def ldflags() LDFLAGS for this compiler These flags are appended to the linker commandline before object files","title":"ldflags"},{"location":"api-documentation/cross-compilers/#libs","text":"@property def libs() -> str LIBFLAGS for this compiler These flags are appended to the linker driver commandline after the objectfiles Currently not used","title":"libs"},{"location":"api-documentation/cross-compilers/#default_builddir","text":"@property def default_builddir() -> Path The default build directory for this cross compiler / board combinarion For now this is just \" /builds/ \"","title":"default_builddir"},{"location":"api-documentation/database-integration/","text":"automate.database.database database_enabled def database_enabled() -> bool Returns True if required packages for database connection are found Database Objects class Database() A Database connection __init__ def __init__(host: str, port: int, db: str, user: str, password: str) -> None Init database connection Arguments host : hostname or ip address for database connection port : port for database connection db : name of database user : username for connection password : password for connection init def init() -> None Initialize an database with locks insert_board def insert_board(board_model: BoardModel, additional_data: Any) -> None Insert a board into database Arguments board_model : The BoardModel to insert additional_data : to be removed TODO : what happens if a board model with the same name already exists.","title":"Database Integration"},{"location":"api-documentation/database-integration/#automatedatabasedatabase","text":"","title":"automate.database.database"},{"location":"api-documentation/database-integration/#database_enabled","text":"def database_enabled() -> bool Returns True if required packages for database connection are found","title":"database_enabled"},{"location":"api-documentation/database-integration/#database-objects","text":"class Database() A Database connection","title":"Database Objects"},{"location":"api-documentation/database-integration/#__init__","text":"def __init__(host: str, port: int, db: str, user: str, password: str) -> None Init database connection Arguments host : hostname or ip address for database connection port : port for database connection db : name of database user : username for connection password : password for connection","title":"__init__"},{"location":"api-documentation/database-integration/#init","text":"def init() -> None Initialize an database with locks","title":"init"},{"location":"api-documentation/database-integration/#insert_board","text":"def insert_board(board_model: BoardModel, additional_data: Any) -> None Insert a board into database Arguments board_model : The BoardModel to insert additional_data : to be removed TODO : what happens if a board model with the same name already exists.","title":"insert_board"},{"location":"api-documentation/model/","text":"automate.model.compiler TripleModel Objects class TripleModel(DataModelBase) Description of a target triple automate.model.board BoardModelFS Objects class BoardModelFS(BoardModel, LoadedModelBase) Adds fields like file_name and file_modification time that are only meaningful for models loaded from Filesystem BoardModelDB Objects class BoardModelDB(BoardModel, DBModelBase) Add data model field id:int for database id automate.model.common VersionString Objects class VersionString(str) Implements a string that supports correct ordering for common version numbering schemes. For example: VersionString(\"10.0.0\") > VersionString(\"9.0.0\") This is a very simple comparison by splitting each version at . characters and then filling each component by prepending zeros until a length of 8 is reached, before comparison. So in the example above the actual comparison would be: \"00000010.00000000.00000000\" > \"00000009.00000000.00000000\"","title":"Model"},{"location":"api-documentation/model/#automatemodelcompiler","text":"","title":"automate.model.compiler"},{"location":"api-documentation/model/#triplemodel-objects","text":"class TripleModel(DataModelBase) Description of a target triple","title":"TripleModel Objects"},{"location":"api-documentation/model/#automatemodelboard","text":"","title":"automate.model.board"},{"location":"api-documentation/model/#boardmodelfs-objects","text":"class BoardModelFS(BoardModel, LoadedModelBase) Adds fields like file_name and file_modification time that are only meaningful for models loaded from Filesystem","title":"BoardModelFS Objects"},{"location":"api-documentation/model/#boardmodeldb-objects","text":"class BoardModelDB(BoardModel, DBModelBase) Add data model field id:int for database id","title":"BoardModelDB Objects"},{"location":"api-documentation/model/#automatemodelcommon","text":"","title":"automate.model.common"},{"location":"api-documentation/model/#versionstring-objects","text":"class VersionString(str) Implements a string that supports correct ordering for common version numbering schemes. For example: VersionString(\"10.0.0\") > VersionString(\"9.0.0\") This is a very simple comparison by splitting each version at . characters and then filling each component by prepending zeros until a length of 8 is reached, before comparison. So in the example above the actual comparison would be: \"00000010.00000000.00000000\" > \"00000009.00000000.00000000\"","title":"VersionString Objects"},{"location":"api-documentation/utilities/","text":"automate.utils.cpuinfo cpuinfo def cpuinfo(con: Connection) -> List[CoreModel] Parse remote CPU info over ssh connection Arguments con : fabric.Connection for the Returns A list of CoreModel with the parsed cpuinfos automate.utils.network connect def connect(host: str, user: str, port: int = 22, identity: Optional[Path] = None, passwd_allowed: bool = False, passwd_retries: int = 3, keyring_allowed: bool = True, gateway: Optional[fabric.Connection] = None, timeout: int = 30) -> fabric.Connection Get a fabric connection to a remote host Arguments host : hostname or ip address username : on remote host port : ssh port for connection identity : Path to ssh private key passwd_allowed : if True use password if ssh public key authentication fails passwd_retries : number of retries for password authentication keyring_allowed : if True store passwords in system keyring gateway : fabric.Connection to use as gateway timeout : timeout for connections in seconds Returns a fabric.Connection to the host find_local_port def find_local_port(start=1024, end=65536) -> int Returns a locally bindable port number Returns port number [int] find_remote_port def find_remote_port(con) -> int Returns a port number bindable on the remote end Returns port number [int] rsync def rsync(con: fabric.Connection, source: str, target: str, exclude: Iterable[str] = (), delete: bool = False, verbose: bool = False, rsync_timeout: int = 20, retries: int = 5, rsync_opts: str = \"\") -> None RSync files or folders to board Starts a remote rsync forwards Forwards rsync server ports over gateway runs rsync -pthrz stops remote rsync daemon rsync server is run as the connections default user, so can not modify files and folders for which this user does not have access rights Arguments con : fabric.Connection to board source : local path should end in \"/\" if the complete folder is synced target : remote_path exclude : iterable of exclude patterns rsync_timeout : --timeout argument for rsync retries : number of retries if rsync fails verbose : if True print transfered files to stdout rsync_opts : string of additional rsync options automate.utils fix_symlinks def fix_symlinks(base_path: Path) -> None This function tries to fix symlinks in cloned buildroots by: Searching for all symlinks with absolute target path in base_path Prepending base_path to the target path Making the targets of the links relative to the symlink location Deleting the symlink and replacing it with one to the relative location automate.utils.uboot build_ubimage def build_ubimage(c, uboot_desc: UBootModel, arch: str, build_path: Path, boot_path: Path, kernel_image: Path) -> None Build a U-Boot image file for kernel deployment Arguments c : AutomateContext to run commands on uboot_desc : UBootModel describing image configuration build_path : Path of kernel Build directory boot_path : path of built ubimage (usually install/boot inside kernel build directory) kernel_image : path to kernel_image file that should be packaged inside builddir automate.utils.cpuinfo_arm automate.utils.kernel KernelConfigBuilder Objects class KernelConfigBuilder() predefined_configs def predefined_configs() -> Generator[Tuple[str, List[str]], None, None] Return all predefined configs that are applicable to a board Returns : An iterable of tuple of string(name) and list of string [kernel config options] predefined_config def predefined_config(name: str) -> List[str] Search for predefined config options with given name KernelData Objects class KernelData(object) Provides collection of calculated kernel data shared_data_dir @property def shared_data_dir() Location for shared kernel sources and cached deploy and build packages deploy_package_name @property def deploy_package_name() Name of the kernel deploy archive build_cache_name @property def build_cache_name() Name of the kernel build cache archive automate.utils.appdirs","title":"Utilities"},{"location":"api-documentation/utilities/#automateutilscpuinfo","text":"","title":"automate.utils.cpuinfo"},{"location":"api-documentation/utilities/#cpuinfo","text":"def cpuinfo(con: Connection) -> List[CoreModel] Parse remote CPU info over ssh connection Arguments con : fabric.Connection for the Returns A list of CoreModel with the parsed cpuinfos","title":"cpuinfo"},{"location":"api-documentation/utilities/#automateutilsnetwork","text":"","title":"automate.utils.network"},{"location":"api-documentation/utilities/#connect","text":"def connect(host: str, user: str, port: int = 22, identity: Optional[Path] = None, passwd_allowed: bool = False, passwd_retries: int = 3, keyring_allowed: bool = True, gateway: Optional[fabric.Connection] = None, timeout: int = 30) -> fabric.Connection Get a fabric connection to a remote host Arguments host : hostname or ip address username : on remote host port : ssh port for connection identity : Path to ssh private key passwd_allowed : if True use password if ssh public key authentication fails passwd_retries : number of retries for password authentication keyring_allowed : if True store passwords in system keyring gateway : fabric.Connection to use as gateway timeout : timeout for connections in seconds Returns a fabric.Connection to the host","title":"connect"},{"location":"api-documentation/utilities/#find_local_port","text":"def find_local_port(start=1024, end=65536) -> int Returns a locally bindable port number Returns port number [int]","title":"find_local_port"},{"location":"api-documentation/utilities/#find_remote_port","text":"def find_remote_port(con) -> int Returns a port number bindable on the remote end Returns port number [int]","title":"find_remote_port"},{"location":"api-documentation/utilities/#rsync","text":"def rsync(con: fabric.Connection, source: str, target: str, exclude: Iterable[str] = (), delete: bool = False, verbose: bool = False, rsync_timeout: int = 20, retries: int = 5, rsync_opts: str = \"\") -> None RSync files or folders to board Starts a remote rsync forwards Forwards rsync server ports over gateway runs rsync -pthrz stops remote rsync daemon rsync server is run as the connections default user, so can not modify files and folders for which this user does not have access rights Arguments con : fabric.Connection to board source : local path should end in \"/\" if the complete folder is synced target : remote_path exclude : iterable of exclude patterns rsync_timeout : --timeout argument for rsync retries : number of retries if rsync fails verbose : if True print transfered files to stdout rsync_opts : string of additional rsync options","title":"rsync"},{"location":"api-documentation/utilities/#automateutils","text":"","title":"automate.utils"},{"location":"api-documentation/utilities/#fix_symlinks","text":"def fix_symlinks(base_path: Path) -> None This function tries to fix symlinks in cloned buildroots by: Searching for all symlinks with absolute target path in base_path Prepending base_path to the target path Making the targets of the links relative to the symlink location Deleting the symlink and replacing it with one to the relative location","title":"fix_symlinks"},{"location":"api-documentation/utilities/#automateutilsuboot","text":"","title":"automate.utils.uboot"},{"location":"api-documentation/utilities/#build_ubimage","text":"def build_ubimage(c, uboot_desc: UBootModel, arch: str, build_path: Path, boot_path: Path, kernel_image: Path) -> None Build a U-Boot image file for kernel deployment Arguments c : AutomateContext to run commands on uboot_desc : UBootModel describing image configuration build_path : Path of kernel Build directory boot_path : path of built ubimage (usually install/boot inside kernel build directory) kernel_image : path to kernel_image file that should be packaged inside builddir","title":"build_ubimage"},{"location":"api-documentation/utilities/#automateutilscpuinfo_arm","text":"","title":"automate.utils.cpuinfo_arm"},{"location":"api-documentation/utilities/#automateutilskernel","text":"","title":"automate.utils.kernel"},{"location":"api-documentation/utilities/#kernelconfigbuilder-objects","text":"class KernelConfigBuilder()","title":"KernelConfigBuilder Objects"},{"location":"api-documentation/utilities/#predefined_configs","text":"def predefined_configs() -> Generator[Tuple[str, List[str]], None, None] Return all predefined configs that are applicable to a board Returns : An iterable of tuple of string(name) and list of string [kernel config options]","title":"predefined_configs"},{"location":"api-documentation/utilities/#predefined_config","text":"def predefined_config(name: str) -> List[str] Search for predefined config options with given name","title":"predefined_config"},{"location":"api-documentation/utilities/#kerneldata-objects","text":"class KernelData(object) Provides collection of calculated kernel data","title":"KernelData Objects"},{"location":"api-documentation/utilities/#shared_data_dir","text":"@property def shared_data_dir() Location for shared kernel sources and cached deploy and build packages","title":"shared_data_dir"},{"location":"api-documentation/utilities/#deploy_package_name","text":"@property def deploy_package_name() Name of the kernel deploy archive","title":"deploy_package_name"},{"location":"api-documentation/utilities/#build_cache_name","text":"@property def build_cache_name() Name of the kernel build cache archive","title":"build_cache_name"},{"location":"api-documentation/utilities/#automateutilsappdirs","text":"","title":"automate.utils.appdirs"},{"location":"api-documentation/builders/cmake/","text":"automate.builder.cmake CMakeBuilder Objects class CMakeBuilder(BaseBuilder) configure def configure( cross_compiler: \"Optional[automate.compiler.CrossCompiler]\" = None, srcdir: Union[Path, str] = \"\", prefix: Union[Path, str] = \"\", extra_flags: Optional[Dict[str, str]] = None, override_flags: Optional[Dict[str, str]] = None, cmake_definitions: List[str] = []) Configure cmake based build Arguments cross_compiler : cross compiler for the build, default: use default compiler for the board srcdir : directory conaining CMakeLists.txt prefix : install prefix on the board cmake_definitions : extra cmake definitions build def build(c) Run cmake build install def install(c) Run cmake install deploy def deploy(c, delete=False) Deploy target on board Arguments delete : if true clean install prefix before deployment","title":"cMake"},{"location":"api-documentation/builders/cmake/#automatebuildercmake","text":"","title":"automate.builder.cmake"},{"location":"api-documentation/builders/cmake/#cmakebuilder-objects","text":"class CMakeBuilder(BaseBuilder)","title":"CMakeBuilder Objects"},{"location":"api-documentation/builders/cmake/#configure","text":"def configure( cross_compiler: \"Optional[automate.compiler.CrossCompiler]\" = None, srcdir: Union[Path, str] = \"\", prefix: Union[Path, str] = \"\", extra_flags: Optional[Dict[str, str]] = None, override_flags: Optional[Dict[str, str]] = None, cmake_definitions: List[str] = []) Configure cmake based build Arguments cross_compiler : cross compiler for the build, default: use default compiler for the board srcdir : directory conaining CMakeLists.txt prefix : install prefix on the board cmake_definitions : extra cmake definitions","title":"configure"},{"location":"api-documentation/builders/cmake/#build","text":"def build(c) Run cmake build","title":"build"},{"location":"api-documentation/builders/cmake/#install","text":"def install(c) Run cmake install","title":"install"},{"location":"api-documentation/builders/cmake/#deploy","text":"def deploy(c, delete=False) Deploy target on board Arguments delete : if true clean install prefix before deployment","title":"deploy"},{"location":"api-documentation/builders/kernel/","text":"automate.builder.kernel KernelBuilder Objects class KernelBuilder(BaseBuilder) configure def configure(kernel_name, cross_compiler=None) configure kernel build Arguments kernel_name : name of the kernel config (see Metadata) cross_compiler : cross_compiler object to use build def build() Build kernel install def install() Install kernel locally and save build directory snapshot","title":"kernel"},{"location":"api-documentation/builders/kernel/#automatebuilderkernel","text":"","title":"automate.builder.kernel"},{"location":"api-documentation/builders/kernel/#kernelbuilder-objects","text":"class KernelBuilder(BaseBuilder)","title":"KernelBuilder Objects"},{"location":"api-documentation/builders/kernel/#configure","text":"def configure(kernel_name, cross_compiler=None) configure kernel build Arguments kernel_name : name of the kernel config (see Metadata) cross_compiler : cross_compiler object to use","title":"configure"},{"location":"api-documentation/builders/kernel/#build","text":"def build() Build kernel","title":"build"},{"location":"api-documentation/builders/kernel/#install","text":"def install() Install kernel locally and save build directory snapshot","title":"install"},{"location":"api-documentation/builders/make/","text":"automate.builder.make MakefileBuilder Objects class MakefileBuilder(BaseBuilder) configure def configure( cross_compiler: \"Optional[automate.compiler.CrossCompiler]\" = None, srcdir: Union[Path, str] = \"\", prefix: Union[Path, str] = \"\", extra_flags: Optional[Dict[str, str]] = None, override_flags: Optional[Dict[str, str]] = None) Configure a makefile build Copy source directory to build directory Record build variables in build_directory/buildvars.yml build def build(target=\"\") Run make with default target and set BUILDVARS for board install def install() Do nothing deploy def deploy(connection=None, delete=False) Deploy package on board Just copies build_directory/srcdir_name to the rundir Arguments delete : if true delete remove non existant files from install prefix on the board deploy_internal def deploy_internal(con, delete=False) Deploy package on board (see deploy()) Arguments con : Connection object delete : see deploy()","title":"make"},{"location":"api-documentation/builders/make/#automatebuildermake","text":"","title":"automate.builder.make"},{"location":"api-documentation/builders/make/#makefilebuilder-objects","text":"class MakefileBuilder(BaseBuilder)","title":"MakefileBuilder Objects"},{"location":"api-documentation/builders/make/#configure","text":"def configure( cross_compiler: \"Optional[automate.compiler.CrossCompiler]\" = None, srcdir: Union[Path, str] = \"\", prefix: Union[Path, str] = \"\", extra_flags: Optional[Dict[str, str]] = None, override_flags: Optional[Dict[str, str]] = None) Configure a makefile build Copy source directory to build directory Record build variables in build_directory/buildvars.yml","title":"configure"},{"location":"api-documentation/builders/make/#build","text":"def build(target=\"\") Run make with default target and set BUILDVARS for board","title":"build"},{"location":"api-documentation/builders/make/#install","text":"def install() Do nothing","title":"install"},{"location":"api-documentation/builders/make/#deploy","text":"def deploy(connection=None, delete=False) Deploy package on board Just copies build_directory/srcdir_name to the rundir Arguments delete : if true delete remove non existant files from install prefix on the board","title":"deploy"},{"location":"api-documentation/builders/make/#deploy_internal","text":"def deploy_internal(con, delete=False) Deploy package on board (see deploy()) Arguments con : Connection object delete : see deploy()","title":"deploy_internal"},{"location":"api-documentation/builders/spec/","text":"","title":"spec"},{"location":"commandline-interface/automate-run/","text":"Interface for Python Interaction The command automate_run can be used to script board and compiler interaction in python. Usage: automate-run [--core-opts] <subcommand> [--subcommand-opts] ... Core options: -d, --debug Enable debug output. -l [STRING], --list[=STRING] List available tasks, optionally limited to a namespace. -V, --version Show version and exit. The tasks provided by automate-run are defined in a file called autofile.py . Which should be placed in the current working directory. Tasks are then defined using the pyinvoke tasks syntax (http://docs.pyinvoke.org/en/stable/concepts/invoking-tasks.html). The only differences is, that tasks get handed in a AutomateContext object instead of pyinvokes contexts, this allows tasks to interact with the boards and compilers from the Metadata repository. Examples Run hello on All boards: Put the following in autofile.py from invoke import task @task def say_hello(c): for board in c.boards(): with board.connect() as con: con.run('echo \"Hello from $(hostname)!\"') The command echo \"Hello from $(hostname)!\" will be run on each board, and return the corresponding return values. To run use: $automate-run say-hello Hello from jetsonagx! Hello from jetsontx2! Hello from raspberrypi4b-jh1! Hello from zynqberry! Access cross compiler information: If one wants to see the default compiler flags for each compiler one could use: @task def compiler_info(c, board=\"\", toolchain=\"\"): board = c.board(board) for compiler in board.compilers(toolchain=toolchain): print(\"compiler:\", compiler.name) print(\" CC =\", compiler.cc) print(\" CFLAGS = \", compiler.cflags) print(\" CXX =\", compiler.cxx) print(\" CXXFLAGS =\", compiler.cxxflags) print(\" LDFLAGS =\", compiler.ldflags) print(\" LDLIBS = \", compiler.libs) print(\"\") To run use: $ automate-run compiler-info -b zynqberry -t gcc compiler: aarch32hf-gcc74 CC = arm-linux-gnueabihf-gcc CFLAGS = -mcpu=cortex-a9 --sysroot=/nfs/es-genial/schrank/boards/zynqberry/sysroot -O2 CXX = arm-linux-gnueabihf-g++ CXXFLAGS = -mcpu=cortex-a9 --sysroot=/nfs/es-genial/schrank/boards/zynqberry/sysroot -O2 LDFLAGS = -mcpu=cortex-a9 --sysroot=/nfs/es-genial/schrank/boards/zynqberry/sysroot -O2 LDLIBS = Further examples The examples from this tutorial and further more advanced examples are available from the folder examples/python/ in this repository.","title":"automate-run"},{"location":"commandline-interface/automate-run/#interface-for-python-interaction","text":"The command automate_run can be used to script board and compiler interaction in python. Usage: automate-run [--core-opts] <subcommand> [--subcommand-opts] ... Core options: -d, --debug Enable debug output. -l [STRING], --list[=STRING] List available tasks, optionally limited to a namespace. -V, --version Show version and exit. The tasks provided by automate-run are defined in a file called autofile.py . Which should be placed in the current working directory. Tasks are then defined using the pyinvoke tasks syntax (http://docs.pyinvoke.org/en/stable/concepts/invoking-tasks.html). The only differences is, that tasks get handed in a AutomateContext object instead of pyinvokes contexts, this allows tasks to interact with the boards and compilers from the Metadata repository.","title":"Interface for Python Interaction"},{"location":"commandline-interface/automate-run/#examples","text":"","title":"Examples"},{"location":"commandline-interface/automate-run/#run-hello-on-all-boards","text":"Put the following in autofile.py from invoke import task @task def say_hello(c): for board in c.boards(): with board.connect() as con: con.run('echo \"Hello from $(hostname)!\"') The command echo \"Hello from $(hostname)!\" will be run on each board, and return the corresponding return values. To run use: $automate-run say-hello Hello from jetsonagx! Hello from jetsontx2! Hello from raspberrypi4b-jh1! Hello from zynqberry!","title":"Run hello on All boards:"},{"location":"commandline-interface/automate-run/#access-cross-compiler-information","text":"If one wants to see the default compiler flags for each compiler one could use: @task def compiler_info(c, board=\"\", toolchain=\"\"): board = c.board(board) for compiler in board.compilers(toolchain=toolchain): print(\"compiler:\", compiler.name) print(\" CC =\", compiler.cc) print(\" CFLAGS = \", compiler.cflags) print(\" CXX =\", compiler.cxx) print(\" CXXFLAGS =\", compiler.cxxflags) print(\" LDFLAGS =\", compiler.ldflags) print(\" LDLIBS = \", compiler.libs) print(\"\") To run use: $ automate-run compiler-info -b zynqberry -t gcc compiler: aarch32hf-gcc74 CC = arm-linux-gnueabihf-gcc CFLAGS = -mcpu=cortex-a9 --sysroot=/nfs/es-genial/schrank/boards/zynqberry/sysroot -O2 CXX = arm-linux-gnueabihf-g++ CXXFLAGS = -mcpu=cortex-a9 --sysroot=/nfs/es-genial/schrank/boards/zynqberry/sysroot -O2 LDFLAGS = -mcpu=cortex-a9 --sysroot=/nfs/es-genial/schrank/boards/zynqberry/sysroot -O2 LDLIBS =","title":"Access cross compiler information:"},{"location":"commandline-interface/automate-run/#further-examples","text":"The examples from this tutorial and further more advanced examples are available from the folder examples/python/ in this repository.","title":"Further examples"},{"location":"commandline-interface/automate/","text":"Commandline Interface The commandline interface is used for interactive and scripted interaction with the boards. It uses the entry point automate. Usage: automate [--core-opts] <subcommand> [--subcommand-opts] ... Core options: -d, --debug Enable debug output. -l [STRING], --list[=STRING] List available tasks, optionally limited to a namespace. -V, --version Show version and exit. Actual tasks are run as subcommands of automate. automate list List available boards and compilers. Usage: automate [--core-opts] list [--options] [other tasks here ...] Docstring: List available boards and compilers -b/--boards: only list boards -c/--compilers: only list compilers Example: $ automate list Boards: ID Machine Cores OS Connections Default Compiler ---------- ---------- ------- ------ ------------- ------------------ jetsonagx jetsonagx 8 ubuntu ssh aarch64-gcc74 zynqberry zynqberry 2 debian ssh aarch32hf-gcc74 jetsontx2 jetsontx2 6 ubuntu ssh,uart aarch64-gcc74 Compiler: ID Toolchain Version Machines Multiarch --------------- ----------- --------- ------------ ----------- aarch32hf-gcc74 gcc 7.4.1 arm yes aarch32hf-gcc82 gcc 8.2.1 arm no aarch32-gcc82 gcc 8.2.1 arm no aarch64-gcc55 gcc 5.5.0 aarch64 yes aarch64-gcc82 gcc 8.2.1 aarch64 no aarch64-gcc65 gcc 6.5.0 aarch64 yes aarch64-gcc74 gcc 7.4.1 aarch64 yes clang-70 llvm 7.0.1 aarch64, arm yes clang-80 llvm 8.0.1 aarch64, arm yes clang-90 llvm 9.0.0 aarch64, arm yes Board Interaction Board interaction commands are defined in namespace board . automate board.board-ids List available board ids. Useful for iterating boards in shell scripts. Usage: automate [--core-opts] board.board-ids [--options] [other tasks here ...] Docstring: returns list of board_ids suitable for usage in shell scripts -f/--filter: filter expression for boards Filter expression is prepended with 'lambda board: ' and then evaluated as a python function board is an object of class Board, only returns board_ids if filter expression is true Examples: board.machine == 'zynqberry' to only run on zynqberry boards board.trylock() to only iterate over boards that are currently unlocked, and lock the boards while iterating Examples: List all available board ids: $automate board.board-ids jetsonagx zynqberry jetsontx2 List only boards with gnueabhif environment (32Bit ARM with floating point): $automate board.board-ids --filter 'board.os.triple.environment.value == gnueabihf' zynqberry automate board.get Get files from board. Usage: automate [--core-opts] board.get [--options] [other tasks here ...] Docstring: Get file from board -b/--board: target board id -r/--remote: remote file path -l/--local: local folder or filename (default is current working directory) Examples: automate board.get zynqberry /proc/cpuinfo automate board.kexec Usage: automate [--core-opts] board.kexec [--options] [other tasks here ...] Docstring: Start the Linux kernel using kexec -b/--board: target board id -k/--kernel-id: target kernel id -a/--append: Append the given string to the commandline -w/--wait: wait until board is reachable via ssh again automate board.lock Usage: automate [--core-opts] board.lock [--options] [other tasks here ...] Docstring: Lock board -b/--board: target board id -t/--timeout: timeout for the lock (deprecated use lease-time) -l/--lease-time: The board is kept locked for at least lease_time Lease time can be given as an int representing seconds or with a suffix d for days, h for hours, m for minutes, s for seconds Example: automate board.lock raspberrypi4b-jh1 -l 2d Lock raspberrypi4b-jh1 for 2 days automate board.put_ Usage: automate [--core-opts] board.put [--options] [other tasks here ...] Docstring: Put file on the board -b/--board: target board id -f/--file: local file -r/--remote: remote file path (default is board specific rundir) automate board.reboot Usage: automate [--core-opts] board.reboot [--options] [other tasks here ...] Docstring: Reboot board -b/--board: target board id -w/--wait block until the board is reachable via ssh again automate board.reset Usage: automate [--core-opts] board.reset [--options] [other tasks here ...] Docstring: Hard reset board -b/--board: target board id -w/--wait: block until the board is reachable again automate board.rsync-to Usage: automate [--core-opts] board.rsync-to [--options] [other tasks here ...] Docstring: rsync a folder to the target board by default the -b/--board: target board id -s/--source: source folder/file -t/--target: target folder/file default is configured rundir on the board -d/--delete: delete files from target that do not exist in the source automate board.run Usage: automate [--core-opts] board.run [--options] [other tasks here ...] Docstring: Run command remotely -b/--board: target board id -c/--command: command to run --cwd: working directory of the command (default is rundir of board) automate board.shell Usage: automate [--core-opts] board.shell [--options] [other tasks here ...] Docstring: Start a remote shell -b/--board: target board id Options: -b STRING, --board=STRING automate board.unlock Usage: automate [--core-opts] board.unlock [--options] [other tasks here ...] Docstring: Unlock board -b/--board: target board id Options: -b STRING, --board=STRING Builders Software for boards can be built using a standard buildsystem. All buildsystem follow the sequence. automate $buildsystem.configure : to configure the build automate $buildsystem.build : to build software automate $buildsystem.install : to install built software in a defined directory on the host system automate $buildsystem.deploy : to copy the built software to the board We currently have support for the following Buildsystems available: cmake : for cmake based software builds make : for Makefile based software builds kernel : to build linux kernels using the kbuild/make base build system Administration tasks Some common administration task are automated in namespace 'admin' automate admin.add-users Adds all users ssh keys from 'metadata/users.yml' to all boards and gateways. automate admin.add-board Adds a board to the metadata directory. This command connects to the target board and tries to extract the metadata automatically. As this command is not able to extract all information 100% reliably. After extraction an interactive wizard is used for review of the extracted board data. Some board data (especially os.kernel) is not generated automatically. So some features especially kernel building and kexec will not work with the automatically generated board descriptions. Usage: automate [--core-opts] admin.add-board [--options] [other tasks here ...] Docstring: Add a new board to test rack # Arguments --user: username on board --host: hostname or ip address of board --port: port of ssh deamon on board (optional default: 22) --gw-host: hostname of gateway (optional if omitted not gateway is configured) --gw-user: username on gateway (optional if omitted use --user) --gw-port: port of ssh on gateway (optional default: 22) automate admin.safe-rootfs Safe a filesystem image of the root filesystem of a board. Filesystem images are saved in in the path given by attribute os.rootfs of a boards metadata description. Usually the path is: ${boardroot}/${board_name}/${board_name}.img Attention: The rootfs images are taken from the running boards, using a forceful readonly remount of the rootfs before taking the dump. In some cases this might lead to a corrupted state of the filesystem dump. Usage: automate [--core-opts] admin.safe-rootfs [--options] Docstring: Safe rootfs image of board -b/--board: target board name automate admin.build-sysroot Convert the dumped root filesystem to a sysroot for building. Sysroots are not necessary for simple builds, but allow usage of libraries installed from the boards package managers. Especially for C++ usage of sysroots is strongly encouraged, if libstdcxx is linked dynamically as otherwise mismatches between the libstdcxx used for linkage and during runtime will lead to dynamic linker errors for most programs. Sysroots are used by default by the builders, if they exist. Usage: automate [--core-opts] admin.build-sysroot [--options] Docstring: Build compiler sysroot for board -b/--board: target board id Examples Examples for commandline usage can be found in examples/shell folder of the project.","title":"automate"},{"location":"commandline-interface/automate/#commandline-interface","text":"The commandline interface is used for interactive and scripted interaction with the boards. It uses the entry point automate. Usage: automate [--core-opts] <subcommand> [--subcommand-opts] ... Core options: -d, --debug Enable debug output. -l [STRING], --list[=STRING] List available tasks, optionally limited to a namespace. -V, --version Show version and exit. Actual tasks are run as subcommands of automate.","title":"Commandline Interface"},{"location":"commandline-interface/automate/#automate-list","text":"List available boards and compilers. Usage: automate [--core-opts] list [--options] [other tasks here ...] Docstring: List available boards and compilers -b/--boards: only list boards -c/--compilers: only list compilers Example: $ automate list Boards: ID Machine Cores OS Connections Default Compiler ---------- ---------- ------- ------ ------------- ------------------ jetsonagx jetsonagx 8 ubuntu ssh aarch64-gcc74 zynqberry zynqberry 2 debian ssh aarch32hf-gcc74 jetsontx2 jetsontx2 6 ubuntu ssh,uart aarch64-gcc74 Compiler: ID Toolchain Version Machines Multiarch --------------- ----------- --------- ------------ ----------- aarch32hf-gcc74 gcc 7.4.1 arm yes aarch32hf-gcc82 gcc 8.2.1 arm no aarch32-gcc82 gcc 8.2.1 arm no aarch64-gcc55 gcc 5.5.0 aarch64 yes aarch64-gcc82 gcc 8.2.1 aarch64 no aarch64-gcc65 gcc 6.5.0 aarch64 yes aarch64-gcc74 gcc 7.4.1 aarch64 yes clang-70 llvm 7.0.1 aarch64, arm yes clang-80 llvm 8.0.1 aarch64, arm yes clang-90 llvm 9.0.0 aarch64, arm yes","title":"automate list"},{"location":"commandline-interface/automate/#board-interaction","text":"Board interaction commands are defined in namespace board .","title":"Board Interaction"},{"location":"commandline-interface/automate/#automate-boardboard-ids","text":"List available board ids. Useful for iterating boards in shell scripts. Usage: automate [--core-opts] board.board-ids [--options] [other tasks here ...] Docstring: returns list of board_ids suitable for usage in shell scripts -f/--filter: filter expression for boards Filter expression is prepended with 'lambda board: ' and then evaluated as a python function board is an object of class Board, only returns board_ids if filter expression is true Examples: board.machine == 'zynqberry' to only run on zynqberry boards board.trylock() to only iterate over boards that are currently unlocked, and lock the boards while iterating Examples: List all available board ids: $automate board.board-ids jetsonagx zynqberry jetsontx2 List only boards with gnueabhif environment (32Bit ARM with floating point): $automate board.board-ids --filter 'board.os.triple.environment.value == gnueabihf' zynqberry","title":"automate board.board-ids"},{"location":"commandline-interface/automate/#automate-boardget","text":"Get files from board. Usage: automate [--core-opts] board.get [--options] [other tasks here ...] Docstring: Get file from board -b/--board: target board id -r/--remote: remote file path -l/--local: local folder or filename (default is current working directory) Examples: automate board.get zynqberry /proc/cpuinfo","title":"automate board.get"},{"location":"commandline-interface/automate/#automate-boardkexec","text":"Usage: automate [--core-opts] board.kexec [--options] [other tasks here ...] Docstring: Start the Linux kernel using kexec -b/--board: target board id -k/--kernel-id: target kernel id -a/--append: Append the given string to the commandline -w/--wait: wait until board is reachable via ssh again","title":"automate board.kexec"},{"location":"commandline-interface/automate/#automate-boardlock","text":"Usage: automate [--core-opts] board.lock [--options] [other tasks here ...] Docstring: Lock board -b/--board: target board id -t/--timeout: timeout for the lock (deprecated use lease-time) -l/--lease-time: The board is kept locked for at least lease_time Lease time can be given as an int representing seconds or with a suffix d for days, h for hours, m for minutes, s for seconds Example: automate board.lock raspberrypi4b-jh1 -l 2d Lock raspberrypi4b-jh1 for 2 days","title":"automate board.lock"},{"location":"commandline-interface/automate/#automate-boardput_","text":"Usage: automate [--core-opts] board.put [--options] [other tasks here ...] Docstring: Put file on the board -b/--board: target board id -f/--file: local file -r/--remote: remote file path (default is board specific rundir)","title":"automate board.put_"},{"location":"commandline-interface/automate/#automate-boardreboot","text":"Usage: automate [--core-opts] board.reboot [--options] [other tasks here ...] Docstring: Reboot board -b/--board: target board id -w/--wait block until the board is reachable via ssh again","title":"automate board.reboot"},{"location":"commandline-interface/automate/#automate-boardreset","text":"Usage: automate [--core-opts] board.reset [--options] [other tasks here ...] Docstring: Hard reset board -b/--board: target board id -w/--wait: block until the board is reachable again","title":"automate board.reset"},{"location":"commandline-interface/automate/#automate-boardrsync-to","text":"Usage: automate [--core-opts] board.rsync-to [--options] [other tasks here ...] Docstring: rsync a folder to the target board by default the -b/--board: target board id -s/--source: source folder/file -t/--target: target folder/file default is configured rundir on the board -d/--delete: delete files from target that do not exist in the source","title":"automate board.rsync-to"},{"location":"commandline-interface/automate/#automate-boardrun","text":"Usage: automate [--core-opts] board.run [--options] [other tasks here ...] Docstring: Run command remotely -b/--board: target board id -c/--command: command to run --cwd: working directory of the command (default is rundir of board)","title":"automate board.run"},{"location":"commandline-interface/automate/#automate-boardshell","text":"Usage: automate [--core-opts] board.shell [--options] [other tasks here ...] Docstring: Start a remote shell -b/--board: target board id Options: -b STRING, --board=STRING","title":"automate board.shell"},{"location":"commandline-interface/automate/#automate-boardunlock","text":"Usage: automate [--core-opts] board.unlock [--options] [other tasks here ...] Docstring: Unlock board -b/--board: target board id Options: -b STRING, --board=STRING","title":"automate board.unlock"},{"location":"commandline-interface/automate/#builders","text":"Software for boards can be built using a standard buildsystem. All buildsystem follow the sequence. automate $buildsystem.configure : to configure the build automate $buildsystem.build : to build software automate $buildsystem.install : to install built software in a defined directory on the host system automate $buildsystem.deploy : to copy the built software to the board We currently have support for the following Buildsystems available: cmake : for cmake based software builds make : for Makefile based software builds kernel : to build linux kernels using the kbuild/make base build system","title":"Builders"},{"location":"commandline-interface/automate/#administration-tasks","text":"Some common administration task are automated in namespace 'admin'","title":"Administration tasks"},{"location":"commandline-interface/automate/#automate-adminadd-users","text":"Adds all users ssh keys from 'metadata/users.yml' to all boards and gateways.","title":"automate admin.add-users"},{"location":"commandline-interface/automate/#automate-adminadd-board","text":"Adds a board to the metadata directory. This command connects to the target board and tries to extract the metadata automatically. As this command is not able to extract all information 100% reliably. After extraction an interactive wizard is used for review of the extracted board data. Some board data (especially os.kernel) is not generated automatically. So some features especially kernel building and kexec will not work with the automatically generated board descriptions. Usage: automate [--core-opts] admin.add-board [--options] [other tasks here ...] Docstring: Add a new board to test rack # Arguments --user: username on board --host: hostname or ip address of board --port: port of ssh deamon on board (optional default: 22) --gw-host: hostname of gateway (optional if omitted not gateway is configured) --gw-user: username on gateway (optional if omitted use --user) --gw-port: port of ssh on gateway (optional default: 22)","title":"automate admin.add-board"},{"location":"commandline-interface/automate/#automate-adminsafe-rootfs","text":"Safe a filesystem image of the root filesystem of a board. Filesystem images are saved in in the path given by attribute os.rootfs of a boards metadata description. Usually the path is: ${boardroot}/${board_name}/${board_name}.img Attention: The rootfs images are taken from the running boards, using a forceful readonly remount of the rootfs before taking the dump. In some cases this might lead to a corrupted state of the filesystem dump. Usage: automate [--core-opts] admin.safe-rootfs [--options] Docstring: Safe rootfs image of board -b/--board: target board name","title":"automate admin.safe-rootfs"},{"location":"commandline-interface/automate/#automate-adminbuild-sysroot","text":"Convert the dumped root filesystem to a sysroot for building. Sysroots are not necessary for simple builds, but allow usage of libraries installed from the boards package managers. Especially for C++ usage of sysroots is strongly encouraged, if libstdcxx is linked dynamically as otherwise mismatches between the libstdcxx used for linkage and during runtime will lead to dynamic linker errors for most programs. Sysroots are used by default by the builders, if they exist. Usage: automate [--core-opts] admin.build-sysroot [--options] Docstring: Build compiler sysroot for board -b/--board: target board id","title":"automate admin.build-sysroot"},{"location":"commandline-interface/automate/#examples","text":"Examples for commandline usage can be found in examples/shell folder of the project.","title":"Examples"},{"location":"setup/boards/","text":"Board Setup To add a new board run: automate admin.add-board --user <username on board> --host <hostname or ip address of board> \\ --gw-user <username on test rack gateway> --gw-host <hostname of gateway> Optionally, but recommended: automate board.build-sysroot <boardname> Installed Tools Boards are required to have the following tools installed: ssh rsync netcat (nc), might need netcat-openbsd apt-get install -y netcat-openbsd perf Kernel All of these options are currently optional for all kernels, but we recommend using them for all Sudo Access Some of the tasks (admin.safe-rootfs, kernel.deploy) require root privileges. It is recommended to configure the board user to allow sudo without password. MAC Adresses Some of the boards (zynqberry) dynamically assign mac addresses at each reboot. For proper dhcp support configure a static MAC address. On debian based systems this can be configured in /etc/network/interfaces: #enable eth0 with dhcp and fixed mac address auto eth0 iface eth0 inet dhcp hwaddress be:bc:1c:87:3e:3f","title":"Boards"},{"location":"setup/boards/#board-setup","text":"To add a new board run: automate admin.add-board --user <username on board> --host <hostname or ip address of board> \\ --gw-user <username on test rack gateway> --gw-host <hostname of gateway> Optionally, but recommended: automate board.build-sysroot <boardname>","title":"Board Setup"},{"location":"setup/boards/#installed-tools","text":"Boards are required to have the following tools installed: ssh rsync netcat (nc), might need netcat-openbsd apt-get install -y netcat-openbsd perf","title":"Installed Tools"},{"location":"setup/boards/#kernel","text":"All of these options are currently optional for all kernels, but we recommend using them for all","title":"Kernel"},{"location":"setup/boards/#sudo-access","text":"Some of the tasks (admin.safe-rootfs, kernel.deploy) require root privileges. It is recommended to configure the board user to allow sudo without password.","title":"Sudo Access"},{"location":"setup/boards/#mac-adresses","text":"Some of the boards (zynqberry) dynamically assign mac addresses at each reboot. For proper dhcp support configure a static MAC address. On debian based systems this can be configured in /etc/network/interfaces: #enable eth0 with dhcp and fixed mac address auto eth0 iface eth0 inet dhcp hwaddress be:bc:1c:87:3e:3f","title":"MAC Adresses"},{"location":"setup/database/","text":"Setup PostgreSQL Database Server This describes a simple gateway configuration assuming a RHEL/CentOS 7 based system. Source: https://yallalabs.com/linux/how-to-install-postgresql-10-on-centos-7-rhel-7/ Add PostgreSQL 10 Repo to yum sudo yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm -y` Install PostgreSQL 10 sudo yum install postgresql10 postgresql10-server postgresql10-contrib postgresql10-libs -y Initialize and Start PostgreSQL Server sudo /usr/pgsql-10/bin/postgresql-10-setup initdb sudo systemctl enable postgresql-10.service sudo systemctl start postgresql-10.service Login into PostgreSQL Server sudo su - postgres psql Change PostgreSQL config In /var/lib/pgsql/10/data/pg_hba.conf change the following lines from local all all peer # IPv4 local connections: host all all 127.0.0.1/32 ident # IPv6 local connections: host all all ::1/128 ident to # Database administrative login by Unix domain socket local all postgres peer # \"local\" is for Unix domain socket connections only local all all md5 # IPv4 local connections: host all all 127.0.0.1/32 md5 # # IPv6 local connections: host all all ::1/128 md5 to allow password authentification Restart PostgreSQL server: sudo systemctl restart postgresql-10.service Setup Database In the create_postgres_db.sh change DATABASE , USER , and PASSWORD and execute the script to create the automate database. Login in as user postgres and run the script: sudo su - postgres ./create_postgres_db.sh Connect to Database Add DATABASE , USER , and PASSWORD to your automate.yml and if necessary activate a proper port forwarding. To initialize the database tables run: automate database.init","title":"Database"},{"location":"setup/database/#setup-postgresql-database-server","text":"This describes a simple gateway configuration assuming a RHEL/CentOS 7 based system. Source: https://yallalabs.com/linux/how-to-install-postgresql-10-on-centos-7-rhel-7/","title":"Setup PostgreSQL Database Server"},{"location":"setup/database/#add-postgresql-10-repo-to-yum","text":"sudo yum install https://download.postgresql.org/pub/repos/yum/10/redhat/rhel-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm -y`","title":"Add PostgreSQL 10 Repo to yum"},{"location":"setup/database/#install-postgresql-10","text":"sudo yum install postgresql10 postgresql10-server postgresql10-contrib postgresql10-libs -y","title":"Install PostgreSQL 10"},{"location":"setup/database/#initialize-and-start-postgresql-server","text":"sudo /usr/pgsql-10/bin/postgresql-10-setup initdb sudo systemctl enable postgresql-10.service sudo systemctl start postgresql-10.service","title":"Initialize and Start PostgreSQL Server"},{"location":"setup/database/#login-into-postgresql-server","text":"sudo su - postgres psql","title":"Login into PostgreSQL Server"},{"location":"setup/database/#change-postgresql-config","text":"In /var/lib/pgsql/10/data/pg_hba.conf change the following lines from local all all peer # IPv4 local connections: host all all 127.0.0.1/32 ident # IPv6 local connections: host all all ::1/128 ident to # Database administrative login by Unix domain socket local all postgres peer # \"local\" is for Unix domain socket connections only local all all md5 # IPv4 local connections: host all all 127.0.0.1/32 md5 # # IPv6 local connections: host all all ::1/128 md5 to allow password authentification Restart PostgreSQL server: sudo systemctl restart postgresql-10.service","title":"Change PostgreSQL config"},{"location":"setup/database/#setup-database","text":"In the create_postgres_db.sh change DATABASE , USER , and PASSWORD and execute the script to create the automate database. Login in as user postgres and run the script: sudo su - postgres ./create_postgres_db.sh","title":"Setup Database"},{"location":"setup/database/#connect-to-database","text":"Add DATABASE , USER , and PASSWORD to your automate.yml and if necessary activate a proper port forwarding. To initialize the database tables run: automate database.init","title":"Connect to Database"},{"location":"setup/gateway/","text":"Gatway Configuration This describes a simple gateway configuration assuming a RHEL based system. Disable Network Manager for the interface All boards are part of a network (10.42.0.0/24) administered by the gateway. The board network is connected to a dedicated network interface of the gateway. To assign a static IP address to the network interface get the name and MAC address of the network interface by executing: ifconfig -a Edit or add the file in /etc/sysconfig/network-scripts/ifcfg-IF_NAME corresponding to your device and replace all content of the file with the following: TYPE=Ethernet DEFROUTE=no IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=shared IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no HWADDR=xx:xx:xx:xx:xx:xx ONBOOT=yes IPV6_ADDR_GEN_MODE=stable-privacy IPV6_PRIVACY=no PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=shared NM_CONTROLLED=no NETMASK=255.255.255.0 IPADDR=10.42.0.1 ZONE=dmz Disable Network Manager dnsmasq By default Network Manager runs a DNS/DHCP server. This DNS server has to be disabled by editing /etc/NetworkManager/NetworkManager.conf . Under section [main] add the following line to the config file: dns=none Reboot the computer: shutdown -r now Enable dnsmasq To enable dnsmasq use: yum install dnsmasq systemctl enable dnsmasq Configure dnsmasq Add the following in /etc/dnsmasq.d/derschrank.conf listen-address=10.42.0.1,::1,127.0.0.1 port=53 interface=IF_NAME bind-interfaces domain-needed expand-hosts server=134.2.12.15 server=134.2.12.4 server=134.2.12.17 dhcp-range=10.42.0.10,10.42.0.150,72h dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases dhcp-authoritative dhcp-option=option:ntp-server,134.2.10.50,134.2.12.2,134.2.14.2 To syntax check the commandline do: dnsmasq --test And apply the changes with: systemctl restart dnsmasq systemctl status dnsmasq When a new board is installed and joins the network. The hostname, MAC address, and IP address can be found in: /var/lib/dnsmasq/dnsmasq.leases . To assign a static IP to a board add the following line to /etc/dnsmasq.d/derschrank.conf : dhcp-host=yy:yy:yy:yy:yy:yy,boardhostname,10.42.0.YY In order to make the locallay installed dnsmasq server the primary DNS server edit /etc/resolv.conf with the following line: nameserver 127.0.0.1 search your.localdomain.com Configure NAT forwarding yum install firewalld systemctl enable firewalld systemctl start firewalld systemctl status firewalld Configure DMZ firewall-cmd --zone=dmz --add-service=ntp --permanent firewall-cmd --zone=dmz --add-service=dhcp --permanent firewall-cmd --zone=dmz --add-service=dns --permanent firewall-cmd --zone=dmz --add-service=http --permanent firewall-cmd --zone=dmz --add-service=https --permanent firewall-cmd --zone=dmz --remove-service=ssh --permanent firewall-cmd --reload Configure Public Zone If gateway is a normal staff host you might want to enable usual stuff: firewall-cmd --zone=public --add-service=nfs --permanent firewall-cmd --zone=public --add-service=nfs3 --permanent firewall-cmd --zone=public --add-service=mdns --permanent firewall-cmd --zone=public --add-service=samba-client --permanent firewall-cmd --permanent --new-service=afs-client firewall-cmd --permanent --service=afs-client --set-description=\"Allows to use afs cache manager\" firewall-cmd --permanent --service=afs-client --add-port=7001/udp firewall-cmd --permanent --service=afs-client --add-port=7001/tcp firewall-cmd --zone=public --add-service=afs-client --permanent firewall-cmd --zone=public --add-service=ipp --permanent firewall-cmd --reload Configure masquerading firewall-cmd --zone=public --add-rich-rule=\"rule family=ipv4 source address=10.42.0.0/24 masquerade\" --permanent firewall-cmd --reload FIXME: this rule is too permissive to allow untrusted users on the boards. This would probably need direct rules https://www.lisenet.com/2016/firewalld-rich-and-direct-rules-setup-rhel-7-server-as-a-router/ Or maybe just disable masquerading and install an ntp server on the gateway.","title":"Gateway"},{"location":"setup/gateway/#gatway-configuration","text":"This describes a simple gateway configuration assuming a RHEL based system.","title":"Gatway Configuration"},{"location":"setup/gateway/#disable-network-manager-for-the-interface","text":"All boards are part of a network (10.42.0.0/24) administered by the gateway. The board network is connected to a dedicated network interface of the gateway. To assign a static IP address to the network interface get the name and MAC address of the network interface by executing: ifconfig -a Edit or add the file in /etc/sysconfig/network-scripts/ifcfg-IF_NAME corresponding to your device and replace all content of the file with the following: TYPE=Ethernet DEFROUTE=no IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=shared IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no HWADDR=xx:xx:xx:xx:xx:xx ONBOOT=yes IPV6_ADDR_GEN_MODE=stable-privacy IPV6_PRIVACY=no PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=shared NM_CONTROLLED=no NETMASK=255.255.255.0 IPADDR=10.42.0.1 ZONE=dmz","title":"Disable Network Manager for the interface"},{"location":"setup/gateway/#disable-network-manager-dnsmasq","text":"By default Network Manager runs a DNS/DHCP server. This DNS server has to be disabled by editing /etc/NetworkManager/NetworkManager.conf . Under section [main] add the following line to the config file: dns=none Reboot the computer: shutdown -r now","title":"Disable Network Manager dnsmasq"},{"location":"setup/gateway/#enable-dnsmasq","text":"To enable dnsmasq use: yum install dnsmasq systemctl enable dnsmasq","title":"Enable dnsmasq"},{"location":"setup/gateway/#configure-dnsmasq","text":"Add the following in /etc/dnsmasq.d/derschrank.conf listen-address=10.42.0.1,::1,127.0.0.1 port=53 interface=IF_NAME bind-interfaces domain-needed expand-hosts server=134.2.12.15 server=134.2.12.4 server=134.2.12.17 dhcp-range=10.42.0.10,10.42.0.150,72h dhcp-leasefile=/var/lib/dnsmasq/dnsmasq.leases dhcp-authoritative dhcp-option=option:ntp-server,134.2.10.50,134.2.12.2,134.2.14.2 To syntax check the commandline do: dnsmasq --test And apply the changes with: systemctl restart dnsmasq systemctl status dnsmasq When a new board is installed and joins the network. The hostname, MAC address, and IP address can be found in: /var/lib/dnsmasq/dnsmasq.leases . To assign a static IP to a board add the following line to /etc/dnsmasq.d/derschrank.conf : dhcp-host=yy:yy:yy:yy:yy:yy,boardhostname,10.42.0.YY In order to make the locallay installed dnsmasq server the primary DNS server edit /etc/resolv.conf with the following line: nameserver 127.0.0.1 search your.localdomain.com","title":"Configure dnsmasq"},{"location":"setup/gateway/#configure-nat-forwarding","text":"yum install firewalld systemctl enable firewalld systemctl start firewalld systemctl status firewalld","title":"Configure NAT forwarding"},{"location":"setup/gateway/#configure-dmz","text":"firewall-cmd --zone=dmz --add-service=ntp --permanent firewall-cmd --zone=dmz --add-service=dhcp --permanent firewall-cmd --zone=dmz --add-service=dns --permanent firewall-cmd --zone=dmz --add-service=http --permanent firewall-cmd --zone=dmz --add-service=https --permanent firewall-cmd --zone=dmz --remove-service=ssh --permanent firewall-cmd --reload","title":"Configure DMZ"},{"location":"setup/gateway/#configure-public-zone","text":"If gateway is a normal staff host you might want to enable usual stuff: firewall-cmd --zone=public --add-service=nfs --permanent firewall-cmd --zone=public --add-service=nfs3 --permanent firewall-cmd --zone=public --add-service=mdns --permanent firewall-cmd --zone=public --add-service=samba-client --permanent firewall-cmd --permanent --new-service=afs-client firewall-cmd --permanent --service=afs-client --set-description=\"Allows to use afs cache manager\" firewall-cmd --permanent --service=afs-client --add-port=7001/udp firewall-cmd --permanent --service=afs-client --add-port=7001/tcp firewall-cmd --zone=public --add-service=afs-client --permanent firewall-cmd --zone=public --add-service=ipp --permanent firewall-cmd --reload","title":"Configure Public Zone"},{"location":"setup/gateway/#configure-masquerading","text":"firewall-cmd --zone=public --add-rich-rule=\"rule family=ipv4 source address=10.42.0.0/24 masquerade\" --permanent firewall-cmd --reload FIXME: this rule is too permissive to allow untrusted users on the boards. This would probably need direct rules https://www.lisenet.com/2016/firewalld-rich-and-direct-rules-setup-rhel-7-server-as-a-router/ Or maybe just disable masquerading and install an ntp server on the gateway.","title":"Configure masquerading"}]}