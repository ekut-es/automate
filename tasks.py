import glob
import os
import sys
from pathlib import Path

from invoke import call, task


@task
def isort(c):
    root_path = Path(os.path.dirname(os.path.abspath(__file__)))
    with c.cd(str(root_path)):
        c.run("isort automate test")


@task(isort)
def black(c):
    "Runs black code formatter"
    root_path = Path(os.path.dirname(os.path.abspath(__file__)))
    with c.cd(str(root_path)):
        c.run("black --target-version py36 -l 80 automate test")


@task
def mypy(c):
    "Run static typechecker on the code"
    root_path = Path(os.path.dirname(os.path.abspath(__file__)))
    with c.cd(str(root_path)):
        c.run("mypy automate")


@task
def test(c, integration=False):
    "Run unit tests"
    root_path = Path(os.path.dirname(os.path.abspath(__file__)))
    with c.cd(str(root_path)):
        if integration:
            c.run(
                "pytest --cov automate test/unit test/integration --cov-config=pyproject.toml"
            )
        else:
            c.run("pytest --cov automate test/unit --cov-config=pyproject.toml")


@task
def cov(c, integration=False):
    "Generate html coverage report"

    test(c, integration)

    root_path = Path(os.path.dirname(os.path.abspath(__file__)))
    with c.cd(str(root_path)):
        c.run("coverage html")
        c.run("xdg-open htmlcov/index.html")


@task
def monkeytype(c):
    "Run unit tests and collect dynamic type information"
    root_path = Path(os.path.dirname(os.path.abspath(__file__)))
    with c.cd(str(root_path)):
        c.run("pytest --monkeytype-output=monkeytype.sqlite3 test/unit")


@task
def pre_commit(c):
    "Installs pre commit hooks"
    root_path = Path(os.path.dirname(os.path.abspath(__file__)))
    with c.cd(str(root_path)):
        c.run("pre-commit install")


@task
def doc(c):
    "Starts the documentation viewer"

    root_path = Path(os.path.dirname(os.path.abspath(__file__)))
    with c.cd(str(root_path)):
        c.run("pydoc-markdown --server")


@task
def clean_examples(c):
    "Removes autogenerated files in examples"

    import glob

    root_path = Path(os.path.dirname(os.path.abspath(__file__)))
    glob_pattern = root_path / "examples" / "**" / "build*"
    for res in glob.glob(str(glob_pattern), recursive=True):
        res = Path(res)
        if res.is_dir():
            c.run("rm -rf {}".format(str(res)))
