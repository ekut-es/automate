image: almalinux:8

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_HOME: "$CI_PROJECT_DIR/.poetry"
  GIT_SUBMODULE_STRATEGY: recursive
  LC_ALL: "en_US.UTF-8"

stages:
  - test
  - integration_test
  - deploy_test
  - deploy

before_script:
  - yum install epel-release -y
  - yum install git sudo python39 python39-devel -y
  - yum groupinstall 'Development Tools' -y
  - yum install postgresql-devel -y
  - python3.9 -m ensurepip
  
  # Install poetry using recommended method
  - export  POETRY_HOME="$CI_PROJECT_DIR/.poetry"
  - curl -sSL https://install.python-poetry.org | python3.9
  - export PATH=${POETRY_HOME}/bin:${PATH}

  
test:
  stage: test
  script:
    - set -e
    - poetry install
    - poetry run inv mypy
    - poetry run inv test 
  tags:
    - docker

integration_test:
  stage: integration_test
  script:
    - set -e
    - poetry install
    - poetry run inv mypy
    - poetry run inv test --integration 
  tags:
    - docker

    
integration_test_with_db:
  stage: integration_test

  services:
    - postgres:10

  variables:
    POSTGRES_HOST: postgres
    POSTGRES_DB: der_schrank_test
    POSTGRES_PORT: 5432
    POSTGRES_USER: der_schrank_test
    POSTGRES_PASSWORD: der_schrank_test
  
  script:
    - set -e
    - poetry install -E postgres
    - poetry run inv mypy
    - poetry run inv test --integration
  tags:
    - docker

deploy to github:
  stage: test
  image: ubuntu:latest
  before_script:
    - apt update
    - apt -y install openssh-client git git-lfs

  variables:
    # Prevent "shallow update not allowed" error.
    # Set it to maximum possible count of *new* commits that you foresee being pushed to a remote.
    GIT_DEPTH: 1000

  only:
    - main
  script:
    - echo "Pushing upstream"
    - ./scripts/git-push git@github.com:ekut-es/automate.git main
  tags:
    - docker
